<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>kubernetes探针记录</title>
    <url>/2020/07/22/kubernetes%E6%8E%A2%E9%92%88%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>kubernetes存在两类探针:分别是存活性探针和就绪性探针</p>
<a id="more"></a>
<h2 id="一、存活性探针"><a href="#一、存活性探针" class="headerlink" title="一、存活性探针"></a>一、存活性探针</h2><h3 id="1-1、exec探针"><a href="#1-1、exec探针" class="headerlink" title="1.1、exec探针"></a>1.1、exec探针</h3><p>简介：exec探针通过在目标容器执行由用户自定义的命令来判断容器的健康状态，若命令状态返回值为0表示”成功”，其他值均为”失败”</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">test:</span> <span class="string">liveness-exec</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">liveness-exec</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">liveness-demo</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">touch</span> <span class="string">/tmp/healthy;</span> <span class="string">sleep</span> <span class="number">60</span><span class="string">;</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">/tmp/healthy;</span> <span class="string">sleep</span> <span class="number">600</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">exec:</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-e</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/tmp/healthy</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2、HTTP探针"><a href="#1-2、HTTP探针" class="headerlink" title="1.2、HTTP探针"></a>1.2、HTTP探针</h3><p>基于HTTP探针的（HTTPGetAction）向目标容器发起一个HTTP请求，根据响应码的结果进行判断</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">test:</span> <span class="string">liveness</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">liveness-http</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">liveness-demo</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.12-alpine</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">lifecycle:</span></span><br><span class="line">      <span class="attr">postStart:</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">'echo Healty &gt; /usr/share/nginx/html/healthz'</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">httpGet:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">        <span class="attr">port:</span> <span class="string">http</span></span><br><span class="line">        <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br></pre></td></tr></table></figure>

<p>字段说明：</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>host</td>
<td>请求主机地址，默认是Pod的IP</td>
</tr>
<tr>
<td>port</td>
<td>请求端口，必须字段</td>
</tr>
<tr>
<td>httpHeaders</td>
<td>自定义请求报文首部</td>
</tr>
<tr>
<td>path</td>
<td>请求的HTTP资源路径，即URL path</td>
</tr>
<tr>
<td>scheme</td>
<td>建立连接使用的协议，默认是http，可以选择https</td>
</tr>
</tbody></table>
<h3 id="1-3、TCP探针"><a href="#1-3、TCP探针" class="headerlink" title="1.3、TCP探针"></a>1.3、TCP探针</h3><p>基于TCP的存活性探测，用于向容器特定的端口发起TCP请求并建立连接进行结果判断，连接成功建立则通过检测</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">test:</span> <span class="string">liveness</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">liveness-tcp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">liveness-tcp-demo</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.12-alpine</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">tcpsocket:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="string">http</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>host</td>
<td>请求连接的目标IP地址，默认为Pod IP</td>
</tr>
<tr>
<td>port</td>
<td>请求连接的目标端口，必选字段</td>
</tr>
</tbody></table>
<p>spec.containers.livenessProbe有如下属性字段</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>initialDelaySeconds</td>
<td>容器启动多久后开始第一次探测，显示为delay属性，默认是0</td>
</tr>
<tr>
<td>timeoutSeconds</td>
<td>健康检查发送请求后等待响应的超时时间，显示为timeout属性，默认是1s</td>
</tr>
<tr>
<td>periodSeconds</td>
<td>探测的频率，显示为period属性，默认是10s，最小是1s</td>
</tr>
<tr>
<td>successThreshold</td>
<td>处于失败状态时，探测操作至少连续多少次成功才被认为是通过检测，显示为success属性，默认值为1</td>
</tr>
<tr>
<td>failureThreshold</td>
<td>处于成功状态时，探测操作至少连续多少次失败才被认为是检测不通过，显示为failure属性，默认值为3</td>
</tr>
</tbody></table>
<h2 id="二、就绪性探针"><a href="#二、就绪性探针" class="headerlink" title="二、就绪性探针"></a>二、就绪性探针</h2><p>和存活性探针类似</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">test:</span> <span class="string">readiness-exec</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">readiness-exec</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">readiness-demo</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">args:</span> <span class="string">["/bin/sh",</span> <span class="string">"-c"</span><span class="string">,</span> <span class="string">"while true; do rm -f /tmp/ready; sleep 30; touch /tmp/ready; sleep 300; done"</span><span class="string">]</span> </span><br><span class="line">    <span class="attr">readinessProbe:</span></span><br><span class="line">      <span class="attr">exec:</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">["test",</span> <span class="string">"-e"</span><span class="string">,</span> <span class="string">"/tmp/ready"</span><span class="string">]</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>探针</tag>
        <tag>liveness</tag>
        <tag>readines</tag>
      </tags>
  </entry>
  <entry>
    <title>linux安装docekr-ce</title>
    <url>/2020/07/21/linux%E5%AE%89%E8%A3%85docekr-ce/</url>
    <content><![CDATA[<p><strong>简介：</strong></p>
<p>Docker 是一个基于LXC技术上构建开源的应用容器引擎，基于Go语言实现的开源容器项目，以镜像、容器、仓库为核心的软件</p>
<a id="more"></a>
<p><strong>Docker架构图：</strong></p>
<p><img src="https://i.loli.net/2020/07/22/o6Qv7nJudBayU9R.jpg" alt="docker架构图.jpg"></p>
<p>Docker目前分为两个版本：社区版本（CE）和企业版本（EE），CE版本免费使用，可以满足绝大部分功能，EE提供一些高级的企业特性，需要付费购买，以下安装的的版本均是CE社区版</p>
<h2 id="CentOS系统安装"><a href="#CentOS系统安装" class="headerlink" title="CentOS系统安装"></a>CentOS系统安装</h2><p><strong>系统必须是CentOS7及以上，内核版本&gt;=3.10</strong></p>
<p>1)、卸载旧版本的docker和docker-engine，若未安装过，可不进行此操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker \  </span><br><span class="line">     docker-client \   </span><br><span class="line">     docker-client-latest \  </span><br><span class="line">     docker-common \   </span><br><span class="line">     docker-latest \  </span><br><span class="line">     docker-latest-logrotate \   </span><br><span class="line">     docker-logrotate \   </span><br><span class="line">     docker-engine</span><br></pre></td></tr></table></figure>

<p>2)、安装docker依赖软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils \ </span><br><span class="line">device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>

<p>3)、添加yum源，下面提供了官方的源和阿里云的源</p>
<p>官方yum源 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">--add-repo https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>阿里云yum源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager \ </span><br><span class="line">--add-repo https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>4)、安装docker-ce</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install docker-ce -y</span><br><span class="line">systemctl start docker &amp;&amp; systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>

<p>5)、配置镜像加速</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/docker/daemon.josn</span><br><span class="line">&#123; </span><br><span class="line">   <span class="string">"registry-mirrors"</span>: [ <span class="string">"https://registry.docker-cn.com"</span> ] </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>6）、<code>/etc/docker/daemon.josn</code>示例写法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "exec-opts": [</span><br><span class="line">      "native.cgroupdriver=systemd"</span><br><span class="line">  ],</span><br><span class="line">  "registry-mirrors": [</span><br><span class="line">      "http://hub-mirror.c.163.com/",</span><br><span class="line">      "https://docker.mirrors.ustc.edu.cn/",</span><br><span class="line">      "https://fz5yth0r.mirror.aliyuncs.com",</span><br><span class="line">      "https://registry.docker-cn.com"</span><br><span class="line">  ],</span><br><span class="line">  "data-root":"/var/lib/docker",</span><br><span class="line">  "storage-driver": "overlay2",</span><br><span class="line">  "storage-opts": [</span><br><span class="line">    "overlay2.override_kernel_check=true"</span><br><span class="line">  ],</span><br><span class="line">  "log-driver": "json-file",</span><br><span class="line">  "log-opts": &#123;</span><br><span class="line">    "max-size": "100m",</span><br><span class="line">    "max-file": "3"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="ubuntu-安装docker"><a href="#ubuntu-安装docker" class="headerlink" title="ubuntu 安装docker"></a>ubuntu 安装docker</h2><p>1、安装依赖包，运行apt能够HTTPS访问Docker源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl \</span><br><span class="line">software-properties-common</span><br></pre></td></tr></table></figure>

<p>2、添加 Docker 官方的 GPG</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>

<p>3、将 Docker 的源添加到 /etc/apt/sources.list</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository \      </span><br><span class="line"><span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \  </span></span><br><span class="line"><span class="string"><span class="variable">$(lsb_release -cs)</span> \       </span></span><br><span class="line"><span class="string">stable"</span></span><br></pre></td></tr></table></figure>

<p>4、安装并Docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install -y docker-ce</span><br></pre></td></tr></table></figure>

<p>5、运行一个测试容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker &amp;&amp; systemctl <span class="built_in">enable</span> docker</span><br><span class="line">docker run -d -p 80:80 nginx</span><br></pre></td></tr></table></figure>



<h2 id="离线安装docker"><a href="#离线安装docker" class="headerlink" title="离线安装docker"></a>离线安装docker</h2><p>官方安装包下载地址：<a href="https://download.docker.com/linux/centos/7/x86_64/stable/Packages/" target="_blank" rel="noopener">https://download.docker.com/linux/centos/7/x86_64/stable/Packages/</a></p>
<p>清华源安装包下载地址：<br><a href="https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/7/x86_64/stable/Packages/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/7/x86_64/stable/Packages/</a></p>
<p>下载完成后会看到以下文件，本次演示是19.03版本。使用<code>sudo yum install /path/to/package.rpm</code>进行安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-ce-cli-19.03.8-3.el7.x86_64.rpm</span><br><span class="line">containerd.io-1.2.13-3.2.el7.x86_64.rpm</span><br><span class="line">docker-ce-19.03.8-3.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>卸载docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum remove docker-ce docker-ce-cli containerd.io</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除镜像、容器和存储卷</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo rm -rf /var/lib/docker</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker安装</tag>
        <tag>docker-ce</tag>
        <tag>linux安装docker</tag>
      </tags>
  </entry>
  <entry>
    <title>openvpn报错及解决方法</title>
    <url>/2020/07/21/openvpn%E6%8A%A5%E9%94%99%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="openvpn的工作模式"><a href="#openvpn的工作模式" class="headerlink" title="openvpn的工作模式"></a>openvpn的工作模式</h2><p>tap俗称网桥模式，tun俗称路由模式，tap在二层，tun在三层</p>
<p>1、tap可以直接使用route这样的路由表命令，但不能用于手机设备。</p>
<p>2、tun可以用于手机，但不能使用route这样的路由表命令，压根无法穿透。</p>
<p>3、tap和tun的路由配置区别，tap往往结合路由表进行设定下一跳，而tun则往往要和iptables集合紧密来实现下一跳。</p>
<a id="more"></a>

<p>所以，如果想要组件VPN实现路由命令进行路由网关的多级跳转，那么需要搭建tap网桥模式。</p>
<p>如果使用了tun模式，那么悲剧的东西要来了，想要实现nat转发，那么你只能选择使用iptables来实现。</p>
<h2 id="openvpn报错及解决方法"><a href="#openvpn报错及解决方法" class="headerlink" title="openvpn报错及解决方法"></a>openvpn报错及解决方法</h2><p><strong>警告1</strong>：Fri May 08 00:19:06 2020 WARNING: this configuration may cache passwords in memory – use the auth-nocache option to prevent this</p>
<p>配置文件设置了将密码存储在cache中，使用auth-nocache阻止这样的使用方式</p>
<p>解决方法：客户端配置文件添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">auth-nocache</span><br></pre></td></tr></table></figure>

<p><strong>警告2</strong>：Openvpn连接的时候提示：No server certificate verification method has been enabled错误</p>
<p>解决：客户端配置文件添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">remote-cert-tls server</span><br></pre></td></tr></table></figure>

<p><strong>警告3</strong>：报ROUTE: route addition failed using CreateIpForwardEntry: 至少有一个参数不正确应对</p>
<p>解决方法：客户端配置文件增加： </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">route-method exe</span><br><span class="line">route-delay 2</span><br></pre></td></tr></table></figure>

<p>警告4：需要多个客户端使用一个证书连接服务端</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">允许多个客户端使用相同证书连接  <span class="comment">#常用于测试开启的话一个证书可以多个客户端连接</span></span></span><br><span class="line">duplicate-cn</span><br></pre></td></tr></table></figure>



<p>二、查看客户端证书状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> find /etc/openvpn/ -<span class="built_in">type</span> f -name <span class="string">"index.txt"</span> | xargs cat</span></span><br><span class="line">V       300714084748Z           01      unknown /CN=server</span><br><span class="line">R       300714085050Z   200716085232Z   02      unknown /CN=ytliangc</span><br><span class="line"></span><br><span class="line">R为注销,V为可用</span><br></pre></td></tr></table></figure>

<p>吊销用户证书：</p>
<p>crl.pem存储的就是被注销的证书列表。我们每禁用一个客户端证书，OpenVPN就会向该文件中追加一个该客户端的加密标识</p>
<p>仅仅这样还是不够的，我们还需要在配置文件中告诉OpenVPN服务器，叫它以后与客户端连接的时候，记得通过crl.pem文件验证该客户端的证书是否已经被注销。因此，我们需要在服务器端的配置文件server.ovpn的最后一行加上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crl-verify &#x2F;etc&#x2F;openvpn&#x2F;certs&#x2F;crl.pem</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -f $&#123;EASY_RSA_LOC&#125;/pki/reqs/$1.req</span><br><span class="line">rm -f $&#123;EASY_RSA_LOC&#125;/pki/private/$1.key</span><br><span class="line">rm -f $&#123;EASY_RSA_LOC&#125;/pki/issued/$1.crt</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>openvpn</tag>
        <tag>常见报错</tag>
        <tag>解决方法</tag>
      </tags>
  </entry>
  <entry>
    <title>shell脚本之无交互写法学习</title>
    <url>/2020/07/18/shell%E8%84%9A%E6%9C%AC%E4%B9%8B%E6%97%A0%E4%BA%A4%E4%BA%92%E5%86%99%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>前言：</p>
<p>借助Expect处理交互的命令,可以将交互 过程如:ssh登录,ftp登录等写在一个脚本上,使之自动化完成.尤其适用于需 要对多台服务器执行相同操作的环境中,可以大大提高系统管理人员的工作效率 </p>
<a id="more"></a>
<p>执行安装命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install expect tcl -y</span><br></pre></td></tr></table></figure>

<p>命令说明</p>
<table>
<thead>
<tr>
<th>指令</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td>spawn</td>
<td>交互程序开始后面跟命令或者指定程序</td>
</tr>
<tr>
<td>set timeout</td>
<td>设置超时时间</td>
</tr>
<tr>
<td>expect</td>
<td>获取匹配信息匹配成功则执行expect后面的程序动作</td>
</tr>
<tr>
<td>send <exp_send></exp_send></td>
<td>用于向进程发送指定的字符串信息</td>
</tr>
<tr>
<td>exp_continue</td>
<td>在expect中多次匹配就需要用到</td>
</tr>
<tr>
<td>eof</td>
<td>expect执行结束 退出</td>
</tr>
</tbody></table>
<p>1、自动生成ssh-keygen的脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">expect &lt;&lt;EOF</span><br><span class="line">set timeout 3</span><br><span class="line">spawn ssh-keygen -t rsa</span><br><span class="line">expect &#123;</span><br><span class="line">"Enter file in which to save the key (/root/.ssh/id_rsa):" &#123; send "\r"; exp_continue&#125;</span><br><span class="line">"Enter passphrase (empty for no passphrase):" &#123; send "\r"; exp_continue&#125;</span><br><span class="line">"Enter same passphrase again:" &#123; send "\r"; exp_continue&#125;</span><br><span class="line">expect eof</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>



<p>2、使用docker无交互部署OpenVPN脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat install-openvpn.sh</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">OpenVPN_data="/etc/openvpn/conf"</span><br><span class="line">if [ -e $OpenVPN_data ]; then</span><br><span class="line">    echo "Notice!!! openvpn_Data dir is exist"</span><br><span class="line">else</span><br><span class="line">  mkdir -p /data/openvpn &amp;&amp; mkdir /data/openvpn/conf</span><br><span class="line">fi</span><br><span class="line">docker rm -f openvpn</span><br><span class="line">docker run -v /data/openvpn:/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -u tcp://192.168.110.111</span><br><span class="line">expect &lt;&lt;EOF</span><br><span class="line">set timeout 60</span><br><span class="line">spawn docker run -v /data/openvpn:/etc/openvpn --rm -it kylemanna/openvpn ovpn_initpki</span><br><span class="line">expect &#123;</span><br><span class="line">"Enter New CA Key Passphrase:" &#123; send "openvpn\r"; exp_continue&#125;</span><br><span class="line">"Re-Enter New CA Key Passphrase:" &#123; send "openvpn\r" &#125;</span><br><span class="line">&#125;</span><br><span class="line">expect "Common Name (eg: your user, host, or server name)*:"</span><br><span class="line">send "\r"</span><br><span class="line">expect "Enter pass phrase for /etc/openvpn/pki/private/ca.key:"</span><br><span class="line">send "openvpn\r"</span><br><span class="line">expect "Enter pass phrase for /etc/openvpn/pki/private/ca.key:"</span><br><span class="line">send "openvpn\r"</span><br><span class="line">expect eof</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">docker run -v /data/openvpn:/etc/openvpn --rm -it kylemanna/openvpn ovpn_initpki</span></span><br><span class="line"><span class="meta">#</span><span class="bash">start openvpn</span></span><br><span class="line">docker run --name openvpn -v /data/openvpn:/etc/openvpn -d -p 1194:1194/tcp --cap-add=NET_ADMIN kylemanna/openvpn</span><br><span class="line">echo "openvpn install complate"</span><br></pre></td></tr></table></figure>

<p>新增用户脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat addgenclinet-key.sh</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">read</span> -p <span class="string">"please your username: "</span> NAME</span></span><br><span class="line">if [ $# -ne 1 ]</span><br><span class="line">then</span><br><span class="line">  echo "Usage: $0 NAME"</span><br><span class="line">  exit</span><br><span class="line">fi</span><br><span class="line">NAME=$1</span><br><span class="line">expect &lt;&lt;EOF</span><br><span class="line">set timeout 10</span><br><span class="line">spawn docker run -v /data/openvpn:/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full $NAME nopass</span><br><span class="line">expect "Enter pass phrase for /etc/openvpn/pki/private/ca.key:"</span><br><span class="line">send "openvpn\r"</span><br><span class="line">expect eof</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">docker run -v /data/openvpn:/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full <span class="variable">$NAME</span> nopass</span></span><br><span class="line">docker run -v /data/openvpn:/etc/openvpn --rm kylemanna/openvpn ovpn_getclient $NAME &gt; /data/openvpn/conf/"$NAME".ovpn</span><br><span class="line"><span class="meta">#</span><span class="bash">docker restart openvpn</span></span><br></pre></td></tr></table></figure>

<p>删除用户脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat remove-key.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">read</span> -p <span class="string">"Delete username: "</span> DNAME</span></span><br><span class="line">if [ $# -ne 1 ]</span><br><span class="line">then</span><br><span class="line">  echo "Usage: $0 NAME"</span><br><span class="line">  exit</span><br><span class="line">fi</span><br><span class="line">NAME=$1</span><br><span class="line">expect &lt;&lt;EOF</span><br><span class="line">set timeout 20</span><br><span class="line">spawn docker run -v /data/openvpn:/etc/openvpn --rm -it kylemanna/openvpn easyrsa revoke $NAME</span><br><span class="line">expect "Continue with revocation:"</span><br><span class="line">send "yes\r"</span><br><span class="line">expect "Enter pass phrase for /etc/openvpn/pki/private/ca.key:"</span><br><span class="line">send "openvpn\r"</span><br><span class="line">expect &lt;&lt;EOF</span><br><span class="line">set timeout 10</span><br><span class="line">spawn docker run -v /data/openvpn:/etc/openvpn --rm -it kylemanna/openvpn easyrsa gen-crl</span><br><span class="line">expect "Enter pass phrase for /etc/openvpn/pki/private/ca.key:"</span><br><span class="line">send "openvpn\r"</span><br><span class="line">expect eof</span><br><span class="line">EOF</span><br><span class="line">expect &lt;&lt;EOF</span><br><span class="line">set timeout 20</span><br><span class="line">spawn docker run -v /data/openvpn:/etc/openvpn --rm -it kylemanna/openvpn easyrsa gen-crl</span><br><span class="line">expect "Enter pass phrase for /etc/openvpn/pki/private/ca.key:"</span><br><span class="line">send "openvpn\r"</span><br><span class="line">expect eof</span><br><span class="line">EOF</span><br><span class="line">docker run -v /data/openvpn:/etc/openvpn --rm -it kylemanna/openvpn rm -f /etc/openvpn/pki/reqs/"$DNAME".req</span><br><span class="line">docker run -v /data/openvpn:/etc/openvpn --rm -it kylemanna/openvpn rm -f /etc/openvpn/pki/private/"$DNAME".key</span><br><span class="line">docker run -v /data/openvpn:/etc/openvpn --rm -it kylemanna/openvpn rm -f /etc/openvpn/pki/issued/"$DNAME".crt</span><br><span class="line">docker restart openvpn</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>脚本</tag>
        <tag>五交互</tag>
        <tag>spawn</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-compose学习总结</title>
    <url>/2020/07/18/docker-compose%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>Compose是Docker官方的容器编排工具，可以让用户通过编写简单yml模板文件，快速创建和管理基于Docker容器的应用集群</p>
<p>Github开源地址：<a href="https://github.com/docker/compose" target="_blank" rel="noopener">https://github.com/docker/compose</a></p>
<a id="more"></a>
<h3 id="使用Compose的三个基本步骤"><a href="#使用Compose的三个基本步骤" class="headerlink" title="使用Compose的三个基本步骤"></a>使用Compose的三个基本步骤</h3><ol>
<li>在<code>Dockerfile</code>定义应用应用的运行环境，让它能够在任何地方在次运行</li>
<li>在<code>docker-compose.yml</code>定义应用的service的结构，使其能够在隔离的环境里面能够一起运行</li>
<li>最后运行运行<code>docker-compose up -d</code>启动应用的容器</li>
</ol>
<h3 id="一个docker-compose-yml示例"><a href="#一个docker-compose-yml示例" class="headerlink" title="一个docker-compose.yml示例"></a>一个<code>docker-compose.yml</code>示例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">version: '2'</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">     - "5000:5000"</span><br><span class="line">    volumes:</span><br><span class="line">     - .:/code</span><br><span class="line">  redis:</span><br><span class="line">    image: redis</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>version</td>
<td>compose文件版本，最新v3</td>
</tr>
<tr>
<td>build</td>
<td>指定Dockerfile所在文件夹的路径</td>
</tr>
<tr>
<td>volumes</td>
<td>数据卷挂载路径设置</td>
</tr>
<tr>
<td>ports</td>
<td>暴露端口信息，”宿主机端口:容器端口”</td>
</tr>
<tr>
<td>restart</td>
<td>指定重启策略，”no、always、on-failure、unless-stop”</td>
</tr>
</tbody></table>
<h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><p>1、首先确保docker安装完成</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker -v</span></span><br><span class="line">Docker version 19.03.12, build 48a66213fe</span><br></pre></td></tr></table></figure>

<p>2、安装docker-compose</p>
<ul>
<li>二进制安装（推荐使用此方法进行安装）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -L https://get.daocloud.io/docker/compose/releases/download/1.26.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker-compose --version</span></span><br><span class="line">docker-compose version 1.26.2, build 1110ad01</span><br></pre></td></tr></table></figure>

<ul>
<li>pip安装</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install docker-compose</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker-compose -v</span></span><br><span class="line">docker-compose version 1.26.2, build unknown</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：如有报错，多执行几次，或者升级pip在执行</p>
</blockquote>
<h3 id="卸载compose"><a href="#卸载compose" class="headerlink" title="卸载compose"></a>卸载compose</h3><p>如果是二进制安装，删除二进制文件即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo rm /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br></pre></td></tr></table></figure>

<p>如果是通过Python pip工具安装，执行如下命令删除</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pip uninstall docker-compose</span></span><br></pre></td></tr></table></figure>

<h2 id="应用示例"><a href="#应用示例" class="headerlink" title="应用示例"></a>应用示例</h2><h3 id="docker-compose部署spark"><a href="#docker-compose部署spark" class="headerlink" title="docker-compose部署spark"></a>docker-compose部署spark</h3><p><code>docker-compose.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">master:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sequenceiq/spark:1.4.0</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">master</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"4040:4040"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8042:8042"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"7077:7077"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8088:8088"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8080:8080"</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">bash</span> <span class="string">/usr/local/spark/sbin/start-master.sh</span> <span class="string">&amp;&amp;</span> <span class="string">ping</span> <span class="string">localhost</span> <span class="string">&gt;</span> <span class="string">/dev/null</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">worker:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sequenceiq/spark:1.4.0</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8081"</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">bash</span> <span class="string">/usr/local/spark/sbin/start-slave.sh</span> <span class="string">spark://master:7077</span> <span class="string">&amp;&amp;</span> <span class="string">ping</span> <span class="string">localhost</span> <span class="string">&gt;/dev/null</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker-compose up -d</span></span><br><span class="line">Creating network "spark_default" with the default driver</span><br><span class="line">Creating spark_master_1 ... done</span><br><span class="line">Creating spark_worker_1 ... done</span><br></pre></td></tr></table></figure>

<p>访问<a href="http://ip:8080" target="_blank" rel="noopener">http://ip:8080</a></p>
<p><img src="https://i.loli.net/2020/07/19/khPi1bH5Gu4QL2S.png" alt="Snipaste_2020-07-13_15-10-08.png"></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker-compose</tag>
        <tag>容器编排</tag>
        <tag>docke</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker镜像Dockerfile学习总结</title>
    <url>/2020/07/14/Docker%E9%95%9C%E5%83%8FDockerfile%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明</p>
<a id="more"></a>
<h3 id="镜像的常用操作"><a href="#镜像的常用操作" class="headerlink" title="镜像的常用操作"></a>镜像的常用操作</h3><ul>
<li>将本机的docker已有镜像导出成tar包</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker save -o ubuntu.tar ubuntu:18.04</span><br></pre></td></tr></table></figure>

<ul>
<li>将本地的tar包镜像导入到本机的docker中</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker load -i ubuntu.tar</span><br></pre></td></tr></table></figure>

<h3 id="使用commit构建镜像"><a href="#使用commit构建镜像" class="headerlink" title="使用commit构建镜像"></a>使用commit构建镜像</h3><p>不推荐使用：效率低，可重复性差，不清楚镜像如何创建出来的，无法审计，存在安全风险</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker commit -a <span class="string">"runoob.com"</span> -m <span class="string">"my apache"</span> a404c6c174a2  mymysql:v1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>-a 提交的镜像作者；</li>
<li>-c 使用Dockerfile指令来创建镜像；</li>
<li>-m 提交时的说明文字；</li>
<li>-p 在commit时，将容器暂停。</li>
</ul>
<h3 id="Dockerfile指令说明"><a href="#Dockerfile指令说明" class="headerlink" title="Dockerfile指令说明"></a>Dockerfile指令说明</h3><table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ARG</td>
<td>定义镜像创建过程中的变量</td>
</tr>
<tr>
<td>FROM</td>
<td>指定创建镜像的基础镜像</td>
</tr>
<tr>
<td>LABEL</td>
<td>为生产的镜像添加元数据标签信息</td>
</tr>
<tr>
<td>EXPOSE</td>
<td>镜像内服务监听的端口，并对外进行暴露</td>
</tr>
<tr>
<td>ENV</td>
<td>指定环境变量</td>
</tr>
<tr>
<td>ENTRYPOINT</td>
<td>指定镜像默认的入口命令</td>
</tr>
<tr>
<td>VOLUME</td>
<td>创建一个数据卷挂载点</td>
</tr>
<tr>
<td>USER</td>
<td>指定运行容器的用户名和UID</td>
</tr>
<tr>
<td>WORKDIR</td>
<td>切换工作目录</td>
</tr>
<tr>
<td>RUN</td>
<td>运行指定命令，如安装一些软件</td>
</tr>
<tr>
<td>CMD</td>
<td>启动容器时指定默认执行的命令</td>
</tr>
<tr>
<td>ADD</td>
<td>添加压缩文件到镜像，常用于将压缩包添并解压至指定目录</td>
</tr>
<tr>
<td>COPY</td>
<td>复制内容到镜像，目标路径不存在时会自动创建</td>
</tr>
</tbody></table>
<p>FROM用法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ARG VERSION=9.3</span><br><span class="line">FROM debian:$VERSION</span><br></pre></td></tr></table></figure>

<p>RUN用法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">RUN apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y net-tools unzip vim zip curl git wget apt-utils \</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br></pre></td></tr></table></figure>

<p>CMD用法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CMD ["executable","param1","param2"]</span><br></pre></td></tr></table></figure>



<p>使用Alpine更换阿里云源下载软件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">RUN echo "https://mirrors.aliyun.com/alpine/v3.6/main" &gt;/etc/apk/repositories</span><br><span class="line">RUN apk add --no-cache add &lt;PackageName&gt;</span><br></pre></td></tr></table></figure>



<h3 id="多阶段构建"><a href="#多阶段构建" class="headerlink" title="多阶段构建"></a>多阶段构建</h3><p>对于一些需要编译的应用，需要编译环境镜像和运行环境镜像，以Go语言为例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、创建相关目录</span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir dockerfile-go &amp;&amp; <span class="built_in">cd</span> dockerfile-go/</span></span><br><span class="line">2、编写go程序</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat main.go</span></span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    "fmt"</span><br><span class="line">)</span><br><span class="line">func main() &#123;</span><br><span class="line"> fmt.Println("Hello,Docker")</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3、编写Dcoekrfile</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat Dockerfile</span></span><br><span class="line"><span class="meta">#</span><span class="bash">define stage name as builder</span></span><br><span class="line">FROM golang:alpine as builder</span><br><span class="line">RUN mkdir -p /go/src/test</span><br><span class="line">WORKDIR /go/src/test</span><br><span class="line">COPY main.go .</span><br><span class="line">RUN CGO_ENABLED=0 GOOS=linux go build -o app .</span><br><span class="line"></span><br><span class="line">FROM alpine:latest</span><br><span class="line">RUN apk --no-cache add ca-certificates</span><br><span class="line">WORKDIR /root/</span><br><span class="line"><span class="meta">#</span><span class="bash">copy file from the builder stage</span></span><br><span class="line">COPY --from=builder /go/src/test/app .</span><br><span class="line">CMD ["./app"]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、构建镜像</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build -t <span class="built_in">test</span>-multistage:latest .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker images | grep <span class="built_in">test</span>-multistage</span></span><br><span class="line">test-multistage    latest     60410880baa0       56 seconds ago      8.15MB</span><br></pre></td></tr></table></figure>



<h3 id="给Ubuntu镜像添加ssh服务"><a href="#给Ubuntu镜像添加ssh服务" class="headerlink" title="给Ubuntu镜像添加ssh服务"></a>给Ubuntu镜像添加ssh服务</h3><p>提前准备<code>authorized_keys</code>，若不需要无密码登录，需设置密码使用密码登录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub &gt; authorized_keys</span><br></pre></td></tr></table></figure>

<p>以下是Dockerfile内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:18.04</span><br><span class="line"></span><br><span class="line">ENV APT_CONFIG_PATH=/etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### add labuser change apt-get source to aliyun</span></span></span><br><span class="line">RUN mv "$&#123;APT_CONFIG_PATH&#125;" "$&#123;APT_CONFIG_PATH&#125;".bak \</span><br><span class="line">    &amp;&amp; echo "deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted" &gt; "$&#123;APT_CONFIG_PATH&#125;" \</span><br><span class="line">    &amp;&amp; echo "deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted" &gt;&gt; "$&#123;APT_CONFIG_PATH&#125;" \</span><br><span class="line">    &amp;&amp; echo "deb http://mirrors.aliyun.com/ubuntu/ bionic universe" &gt;&gt; "$&#123;APT_CONFIG_PATH&#125;" \</span><br><span class="line">    &amp;&amp; echo "deb http://mirrors.aliyun.com/ubuntu/ bionic-updates universe" &gt;&gt; "$&#123;APT_CONFIG_PATH&#125;" \</span><br><span class="line">    &amp;&amp; echo "deb http://mirrors.aliyun.com/ubuntu/ bionic multiverse" &gt;&gt; "$&#123;APT_CONFIG_PATH&#125;" \</span><br><span class="line">    &amp;&amp; echo "deb http://mirrors.aliyun.com/ubuntu/ bionic-updates multiverse" &gt;&gt; "$&#123;APT_CONFIG_PATH&#125;" \</span><br><span class="line">    &amp;&amp; echo "deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse" &gt;&gt; "$&#123;APT_CONFIG_PATH&#125;" \</span><br><span class="line">    &amp;&amp; echo "deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted" &gt;&gt; "$&#123;APT_CONFIG_PATH&#125;" \</span><br><span class="line">    &amp;&amp; echo "deb http://mirrors.aliyun.com/ubuntu/ bionic-security universe" &gt;&gt; "$&#123;APT_CONFIG_PATH&#125;" \</span><br><span class="line">    &amp;&amp; echo "deb http://mirrors.aliyun.com/ubuntu/ bionic-security multiverse" &gt;&gt; "$&#123;APT_CONFIG_PATH&#125;"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装ssh服务</span></span><br><span class="line">RUN apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y openssh-server \</span><br><span class="line">    &amp;&amp; mkdir -p /var/run/sshd \</span><br><span class="line">    &amp;&amp; mkdir -p /root/.ssh \</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">取消pam限制</span></span><br><span class="line">RUN sed -ri 's/session required pam_loginuid.so/#session required pam_loginuid.so/g' /etc/pam.d/sshd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">复制配置文件到对应的位置，并赋予脚本可执行权限</span></span><br><span class="line">ADD authorized_keys /root/.ssh/authorized_keys</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">开放端口</span></span><br><span class="line">EXPOSE 22</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置自启动命令</span></span><br><span class="line">CMD ["/usr/sbin/sshd","-D"]</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>Dockerfile</tag>
        <tag>镜像构建</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10家庭教育版安装docker-ce</title>
    <url>/2020/07/11/Win10%E5%AE%B6%E5%BA%AD%E6%95%99%E8%82%B2%E7%89%88%E5%AE%89%E8%A3%85docker-ce/</url>
    <content><![CDATA[<p>win10家庭版操作系统，无法直接Docker for Windows安装，因此只好使用Docker Toolbox来安装docker</p>
<p>什么是Docker Toolbox？</p>
<blockquote>
<p>Docker Toolbox is an installer for quick setup and launch of a Docker environment on older Mac and Windows systems that do not meet the requirements of the new <a href="https://docs.docker.com/docker-for-mac/" target="_blank" rel="noopener">Docker Desktop for Mac</a> and <a href="https://docs.docker.com/docker-for-windows/" target="_blank" rel="noopener">Docker Desktop for Windows</a> apps.</p>
<p>简单来说就是Docker Toolbox就是在旧的Mac 和 Windows系统上快速运行docker环境的工具</p>
</blockquote>
<a id="more"></a>

<p>下载地址：<a href="https://github.com/docker/toolbox/releases" target="_blank" rel="noopener">https://github.com/docker/toolbox/releases</a></p>
<p>Github如果下载不下来，使用下面备用链接</p>
<table>
<thead>
<tr>
<th>链接地址</th>
<th>提取码</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://pan.baidu.com/s/1QWOsOFjCnjU7VfGIhhv0dw" target="_blank" rel="noopener">百度云盘链接</a></td>
<td>zojb</td>
</tr>
</tbody></table>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>官方安装：<a href="https://docs.docker.com/toolbox/toolbox_install_windows/" target="_blank" rel="noopener">Win10安装Docker Toolbox</a></p>
<h3 id="首先确认本机的CPU虚拟化功能已经打开，没有打开的需要在BISO进行开启"><a href="#首先确认本机的CPU虚拟化功能已经打开，没有打开的需要在BISO进行开启" class="headerlink" title="首先确认本机的CPU虚拟化功能已经打开，没有打开的需要在BISO进行开启"></a>首先确认本机的CPU虚拟化功能已经打开，没有打开的需要在BISO进行开启</h3><p><img src="https://i.loli.net/2020/07/22/wq12uHK86JYDZer.png" alt="Snipaste_2020-07-12_18-44-23.png"></p>
<h3 id="安装VirtualBox"><a href="#安装VirtualBox" class="headerlink" title="安装VirtualBox"></a>安装VirtualBox</h3><h3 id="关闭Hyper-v"><a href="#关闭Hyper-v" class="headerlink" title="关闭Hyper-v"></a>关闭Hyper-v</h3><p>进入电脑的控制面板-&gt;程序-&gt;启用或关闭Windows功能-&gt;把Hyper-v勾选去掉，如果没有启用，不用进行此操作，关闭后电脑会重启。</p>
<h3 id="安装Docker-Toolbox"><a href="#安装Docker-Toolbox" class="headerlink" title="安装Docker Toolbox"></a>安装Docker Toolbox</h3><p><img src="https://docs.docker.com/toolbox/images/installer_open.png" alt="Release page"></p>
<p><img src="https://i.loli.net/2020/07/22/pKdf3nosAWbj2HB.png" alt="Snipaste_2020-07-22_10-33-10.png"><br><img src="https://i.loli.net/2020/07/22/6fIBMElidZzNyOg.png" alt="Snipaste_2020-07-22_10-33-41.png"><br><img src="https://i.loli.net/2020/07/22/72P3IZCr9lzfhVH.png" alt="Snipaste_2020-07-22_10-34-00.png"></p>
<p>安装完成后，会出现如下几个图标：</p>
<p><img src="https://i.loli.net/2020/07/22/IP1a82f5BqmXsyg.png" alt="Snipaste_2020-07-22_10-34-16.png"></p>
<h3 id="下载boot2docker"><a href="#下载boot2docker" class="headerlink" title="下载boot2docker"></a>下载boot2docker</h3><p><strong>什么是boot2docker？</strong></p>
<blockquote>
<p>Boot2Docker is a lightweight Linux distribution made specifically to run <a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a> containers</p>
<p>是一个轻量级的分发docker容器的工具</p>
</blockquote>
<table>
<thead>
<tr>
<th>链接地址</th>
<th>提取码</th>
</tr>
</thead>
<tbody><tr>
<td>下载地址：<a href="https://github.com/boot2docker/boot2docker" target="_blank" rel="noopener">GitHuB下载地址</a></td>
<td></td>
</tr>
<tr>
<td>链接：<a href="https://pan.baidu.com/s/15GM4vvNuTE1SB9ShGbAHig" target="_blank" rel="noopener">百度云盘链接</a></td>
<td>dvap</td>
</tr>
</tbody></table>
<p>下载后放在<code>C:\Users\Administrator\.docker\machine\cache</code>下面，如果是有特别的用户，放到指定用户下的目录即可</p>
<h3 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h3><p>双击<code>Docker Quickstart Terminal</code>, 如果出现如下页面，说明Docker已启动成功</p>
<p><img src="https://i.loli.net/2020/07/22/7fYMDB34PlLHZqG.png" alt="Snipaste_2020-07-22_10-32-07.png"></p>
<h3 id="6、常见问题及解决方法"><a href="#6、常见问题及解决方法" class="headerlink" title="6、常见问题及解决方法"></a>6、常见问题及解决方法</h3><p align="left">6.1、docker version报错“error during connect: Get http://%2F%2F.%2Fpipe%2Fdocker_engine/v1.28/version: open //./pipe/docker_ ”</p>

<p><img src="https://i.loli.net/2020/08/01/8rQm3DkCixLReyu.png" alt="image.png"></p>
<p>错误原因：可能是之前卸载virtual box没重启，重新安装后virtual box环境设定没配置上。</p>
<p>处理方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-machine env --shell cmd default</span><br><span class="line">//或者</span><br><span class="line">docker-machine env default</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/08/01/1F5yd9HaMlvet4p.png" alt="image.png"><br>将上述的env变量复制执行一遍</p>
<p>然后在执行<code>docker version</code><br><img src="https://i.loli.net/2020/08/01/2uM68HxGL9yJOVb.png" alt="image.png"><br>6.2、修改docker国内镜像源地址<br>针对安装了Docker for Windows的用户，可以参考以下配置步骤：<br>在系统右下角托盘图标内右键菜单选择 Settings，打开配置窗口后左侧导航菜单选择 Docker Daemon。编辑窗口内的JSON串，填写下方加速器地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://gnpn2mqo.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编辑完成后点击 Apply 保存按钮，等待Docker重启并应用配置的镜像加速器。</p>
<p>针对安装了Docker Toolbox的用户<br>使用git命令行执行如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-machine ssh <span class="comment"># 进入docker容器</span></span><br><span class="line">sudo vi /var/lib/boot2docker/profile</span><br><span class="line"><span class="comment">#在–label provider=virtualbox下面添加一行内容：</span></span><br><span class="line">--registry-mirror https://gnpn2mqo.mirror.aliyuncs.com</span><br></pre></td></tr></table></figure>
<p>重启docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-machine restart</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>Win10</tag>
        <tag>Docker Desktop Install</tag>
        <tag>docker安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Harbor镜像仓库v2.0.1安装及使用</title>
    <url>/2020/07/11/Harbor%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93v2-0-1%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Harbor简介"><a href="#Harbor简介" class="headerlink" title="Harbor简介"></a>Harbor简介</h1><p><img src="https://i.loli.net/2020/07/12/MF5oDPOXIblENKS.png" alt="image.png"></p>
<p>官网地址：<a href="https://goharbor.io/" target="_blank" rel="noopener">https://goharbor.io/</a></p>
<p>Harbor（港口，港湾）是一个用于存储和分发Docker镜像的企业级Registry服务器。除了Harbor这个私有镜像仓库之外，还有Docker官方提供的Registry。相对Registry，Harbor具有很多优势：</p>
<a id="more"></a>

<ol>
<li>提供分层传输机制，优化网络传输 Docker镜像是是分层的，而如果每次传输都使用全量文件(所以用FTP的方式并不适合)，显然不经济。必须提供识别分层传输的机制，以层的UUID为标识，确定传输的对象。</li>
<li>提供WEB界面，优化用户体验 只用镜像的名字来进行上传下载显然很不方便，需要有一个用户界面可以支持登陆、搜索功能，包括区分公有、私有镜像。</li>
<li>支持水平扩展集群 当有用户对镜像的上传下载操作集中在某服务器，需要对相应的访问压力作分解。</li>
<li>良好的安全机制 企业中的开发团队有很多不同的职位，对于不同的职位人员，分配不同的权限，具有更好的安全性。 </li>
</ol>
<h1 id="Harbor安装"><a href="#Harbor安装" class="headerlink" title="Harbor安装"></a>Harbor安装</h1><p>1）先安装Docker并启动Docker（已完成）<br>      参考之前博客安装过程<br>2）先安装docker-compose</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>3）给docker-compose添加执行权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>4）查看docker-compose是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker-compose -version</span></span><br><span class="line">docker-compose version 1.25.0, build 0a186604</span><br></pre></td></tr></table></figure>

<p>5）下载Harbor的压缩包（本次安装 v2.0.1）</p>
<p>下载地址：<a href="https://github.com/goharbor/harbor/releases" target="_blank" rel="noopener">https://github.com/goharbor/harbor/releases</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/goharbor/harbor/releases/download/v2.0.1/harbor-offline-installer-v2.0.1.tgz</span><br></pre></td></tr></table></figure>

<p>6）上传压缩包到linux，并解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xzf harbor-offline-installer-v1.9.2.tgz</span><br><span class="line">mkdir /opt/harbor</span><br><span class="line">mv harbor/* /opt/harbor</span><br><span class="line">cd /opt/harbor</span><br></pre></td></tr></table></figure>

<p>7）修改Harbor的配置，没有的话复制<code>harbor.yml.tmpl</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi harbor.yml</span><br><span class="line">修改hostname和port</span><br><span class="line">hostname: 192.168.66.102</span><br><span class="line">port: 85</span><br></pre></td></tr></table></figure>

<p>8）安装Harbor</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./prepare</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>

<p>9）启动、停止Harbor</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up -d 启动</span><br><span class="line">docker-compose stop 停止</span><br><span class="line">docker-compose restart 重新启动</span><br></pre></td></tr></table></figure>

<p>10）访问Harbor</p>
<p><a href="http://192.168.66.102:85" target="_blank" rel="noopener">http://192.168.66.102:85</a></p>
<p>默认账户密码：admin/Harbor12345</p>
<p><img src="https://i.loli.net/2020/07/12/Cct18ahA2uj6WRL.png" alt="image.png"></p>
<h1 id="推送镜像验证"><a href="#推送镜像验证" class="headerlink" title="推送镜像验证"></a>推送镜像验证</h1><p>1）、先需要将仓库添加到docker配置里面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">"insecure-registries": ["192.168.66.102:85"]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart docker</span></span><br></pre></td></tr></table></figure>

<p>2)、登录Harbor仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-n1 harbor]# docker login 192.168.66.102:85</span><br><span class="line">Username: admin</span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure>

<p>3)、上传镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-n1 harbor]# docker push 192.168.66.102:85/library/nginx:latest</span><br><span class="line">The push refers to repository [192.168.66.102:85/library/nginx]</span><br><span class="line">6c7de695ede3: Pushed</span><br><span class="line">2f4accd375d9: Pushed</span><br><span class="line">ffc9b21953f4: Pushed</span><br><span class="line">latest: digest: sha256:8269a7352a7dad1f8b3dc83284f195bac72027dd50279422d363d49311ab7d9b size: 948</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/07/12/rKuikNvqW6PUxOb.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>Habor</tag>
        <tag>私有镜像库</tag>
        <tag>images</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-compose安装Hadoop+hive+MySQL</title>
    <url>/2020/07/11/docker-compose%E5%AE%89%E8%A3%85Hadoop-hive-MySQL/</url>
    <content><![CDATA[<p>首先特别感谢参考的博客，感谢作者<code>Victor_python</code>是你指明了我探索的道路，让我能顺利完成本博客的内容。参考连接：<a href="https://www.jianshu.com/p/8c46d935c81b" target="_blank" rel="noopener">docker下安装hive 2.3.4</a></p>
<a id="more"></a>
<p>==============================================================</p>
<p>本博客使用软件信息如下</p>
<blockquote>
<p>Hadoop: v2.7.3</p>
<p>hive: v2.3.7</p>
<p>mysql: v5.7</p>
<p>mysql-connector-java:  v5.1.49</p>
<p>Hadoop和hive的安装包可以到官方地址下载，也可以到国内的清华源或者阿里云的镜像站下载</p>
</blockquote>
<p><strong>mysql-connector-java下载地址：</strong> <a href="https://downloads.mysql.com/archives/c-j/" target="_blank" rel="noopener">mysql-connector-java</a></p>
<p>如果上述地址无法下载，也可以到我的百度网盘下载</p>
<table>
<thead>
<tr>
<th>连接地址</th>
<th>提取码</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://pan.baidu.com/s/15p7Br03gDcrQN0Kbr9AapA" target="_blank" rel="noopener">百度网盘连接</a></td>
<td>nv7j</td>
</tr>
</tbody></table>
<h2 id="首先确保docker安装、启动成功"><a href="#首先确保docker安装、启动成功" class="headerlink" title="首先确保docker安装、启动成功"></a>首先确保docker安装、启动成功</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker -v</span></span><br><span class="line">Docker version 19.03.8, build afacb8b</span><br></pre></td></tr></table></figure>



<h2 id="安装dockc-ompose"><a href="#安装dockc-ompose" class="headerlink" title="安装dockc-ompose"></a>安装dockc-ompose</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker-compose -v</span></span><br><span class="line">docker-compose version 1.25.0, build 0a186604</span><br></pre></td></tr></table></figure>



<h2 id="准备相关文件，内容如下"><a href="#准备相关文件，内容如下" class="headerlink" title="准备相关文件，内容如下"></a>准备相关文件，内容如下</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master-dev opt]# mkdir /opt/hadoop &amp;&amp; cd /opt</span><br><span class="line">[root@master-dev opt]# tree -L 2 hadoop/</span><br><span class="line">hadoop/</span><br><span class="line">├── apache-hive-2.3.7-bin.tar.gz            #hive安装包</span><br><span class="line">├── docker-compose.yaml       </span><br><span class="line">├── Dockerfile</span><br><span class="line">├── hadoop-2.7.3.tar.gz                     #hadoop安装包     </span><br><span class="line">├── mysql-connector-java-5.1.49.jar         #hive连接mysql使用的jdbc</span><br><span class="line">├── run.sh                  </span><br><span class="line">└── src                                     #hadoop和hive的配置文件</span><br><span class="line">    ├── core-site.xml</span><br><span class="line">    ├── hadoop-env.sh</span><br><span class="line">    ├── hdfs-site.xml</span><br><span class="line">    ├── hive-site.xml</span><br><span class="line">    ├── mapred-site.xml</span><br><span class="line">    └── profile</span><br><span class="line"></span><br><span class="line">3 directories, 19 files</span><br></pre></td></tr></table></figure>

<p>在<code>/opt/hadoop</code>下面新建<code>run.sh</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat run.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">/usr/sbin/sshd -D</span><br><span class="line"><span class="meta">#</span><span class="bash">以下内容需要等容器启动后进去容器执行</span></span><br><span class="line"><span class="meta">#</span><span class="bash">启动Hadoop</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">source</span> /etc/profile &amp;&amp; hadoop namenode -format   </span></span><br><span class="line"><span class="meta">#</span><span class="bash">start-dfs.sh &amp;&amp; start-yarn.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash">启动hive链接mysql数据库</span></span><br><span class="line"><span class="meta">#</span><span class="bash">schematool -initSchema -dbType mysql</span></span><br><span class="line"><span class="meta">#</span><span class="bash">启动HiveServer</span></span><br><span class="line"><span class="meta">#</span><span class="bash">nohup hiveserver2 &amp;</span></span><br></pre></td></tr></table></figure>

<p>在<code>/opt/hadoop</code>下面新建<code>Dockerfile</code></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成的镜像以centos镜像为基础</span></span><br><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> by ytliangc</span><br><span class="line"><span class="comment">#升级系统</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y update</span></span><br><span class="line"><span class="comment">#安装openssh-server、client</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install openssh-server openssh-clients.x86_64 vim less wget</span></span><br><span class="line"><span class="comment">#修改/etc/ssh/sshd_config</span></span><br><span class="line"><span class="comment">#RUN sed -i 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_config</span></span><br><span class="line"><span class="comment">#将密钥文件复制到/etc/ssh/目录中。这里要用root的权限生成key</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /root/.ssh</span></span><br><span class="line"><span class="comment">#生成秘钥、公钥</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ssh-keygen -t rsa -b 2048 -P <span class="string">''</span> -f /root/.ssh/id_rsa</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> cat /root/.ssh/id_rsa.pub &gt; /root/.ssh/authorized_keys</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> cp /root/.ssh/id_rsa /etc/ssh/ssh_host_rsa_key</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> cp /root/.ssh/id_rsa.pub /etc/ssh/ssh_host_rsa_key.pub</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 jre 1.8</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install java-1.8.0-openjdk.x86_64</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=/etc/alternatives/jre_1.<span class="number">8.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义时区参数</span></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="comment">#设置时区</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ln -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="string">'$TZ'</span> &gt; /etc/timezone</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将ssh服务启动脚本复制到/usr/local/sbin目录中，并改变权限为755</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> run.sh /usr/<span class="built_in">local</span>/sbin/run.sh</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod 755 /usr/<span class="built_in">local</span>/sbin/run.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#拷贝hadoop和hive安装包</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> hadoop-2.7.3.tar.gz /usr/<span class="built_in">local</span></span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> apache-hive-2.3.7-bin.tar.gz /usr/<span class="built_in">local</span></span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> mysql-connector-java-5.1.49.jar /usr/<span class="built_in">local</span>/apache-hive-2.3.7-bin/lib/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">    <span class="built_in">echo</span> <span class="string">"export HADOOP_HOME="</span>/usr/<span class="built_in">local</span>/hadoop-2.7.3<span class="string">""</span> &gt;&gt; /etc/profile \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"export PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin "</span> &gt;&gt; /etc/profile \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"export HIVE_HOME="</span>/usr/<span class="built_in">local</span>/apache-hive-2.3.7-bin<span class="string">" "</span> &gt;&gt; /etc/profile \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"export PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin:<span class="variable">$HIVE_HOME</span>/bin"</span>  &gt;&gt; /etc/profile \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /etc/profile</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> [<span class="string">"src/core-site.xml"</span>,<span class="string">"/usr/local/hadoop-2.7.3/etc/hadoop/"</span>]</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> [<span class="string">"src/hdfs-site.xml"</span>,<span class="string">"/usr/local/hadoop-2.7.3/etc/hadoop/"</span>]</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> [<span class="string">"src/mapred-site.xml"</span>,<span class="string">"/usr/local/hadoop-2.7.3/etc/hadoop/"</span>]</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> [<span class="string">"src/hive-site.xml"</span>,<span class="string">"/usr/local/apache-hive-2.3.7-bin/conf"</span>]</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> [<span class="string">"src/hadoop-env.sh"</span>,<span class="string">"/usr/local/hadoop-2.7.3/etc/hadoop/"</span>]</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> [<span class="string">"src/profile"</span>,<span class="string">"/etc/profile"</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">  <span class="built_in">source</span> /etc/profile</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#变更root密码为root</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"root:root"</span>| chpasswd</span></span><br><span class="line"><span class="comment">#开放窗口的22端口   根据自己的需求来增加或删除</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">22</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9000</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">50070</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">10000</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8088</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">10002</span></span><br><span class="line"><span class="comment">#运行脚本，启动sshd服务</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/usr/local/sbin/run.sh"</span>]</span></span><br></pre></td></tr></table></figure>

<p>在<code>/opt/hadoop</code>下面新建<code>docker-compose.yaml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"2"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysqldb:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/public_ns/mysql:5.7</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"3306:3306"</span></span><br><span class="line">    <span class="attr">mem_limit:</span> <span class="string">2048M</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=123456</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/docker-data/mysql-data/mysql/:/var/lib/mysql/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">  <span class="attr">myhadoop:</span></span><br><span class="line">    <span class="attr">image:</span>  <span class="string">my_centos:v1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">hadoop</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"32802:22"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"32801:8080"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"32800:8088"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"32799:9000"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"32798:10000"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"32797:10002"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"32796:50070"</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：这里在启动docker-compose之前需要给MySQL创建一个存储的空目录！！！</p>
</blockquote>
<p>src下面的文件存放在GitHub上，链接地址：<a href="https://github.com/pythonTaotao/docker-file/tree/master/project/Hadoop-hive-MySQL/src" target="_blank" rel="noopener">Github地址</a></p>
<h2 id="准备基础镜像"><a href="#准备基础镜像" class="headerlink" title="准备基础镜像"></a>准备基础镜像</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在/opt/hadoop目录下执行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build -t docker build -t my_centos:v1 .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker-compose up -d</span></span><br><span class="line">Starting mysql  ... done</span><br><span class="line">Starting hadoop ... done</span><br></pre></td></tr></table></figure>



<p>1、在数据库启动后，我们还需要链接到数据新建一个名为hive的数据库，给hive使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[root@vmlabmaster-dev hadoop]<span class="comment"># docker exec -it mysql bash</span></span><br><span class="line">root@a030f58f915d:/<span class="comment"># mysql -uroot -p</span></span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands <span class="keyword">end</span> <span class="keyword">with</span> ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.7.30 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type '<span class="keyword">help</span>;' or '\h' for help. <span class="keyword">Type</span> <span class="string">'\c'</span> <span class="keyword">to</span> <span class="keyword">clear</span> the <span class="keyword">current</span> <span class="keyword">input</span> statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">create</span> <span class="keyword">database</span> hive;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>2、修改数据库连接信息，需要把mysql修改为hive</p>
<p><img src="https://i.loli.net/2020/07/12/Gn9ybXAJDQux6O7.png" alt="image-20200712113911069.png"></p>
<h2 id="启动Hadoop和hive"><a href="#启动Hadoop和hive" class="headerlink" title="启动Hadoop和hive"></a>启动Hadoop和hive</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it hadoop bash</span></span><br><span class="line"></span><br><span class="line">[root@73326baf0f61 /]# source /etc/profile &amp;&amp; hadoop namenode -format</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">出现提示的话，输入yes即可</span></span><br><span class="line">[root@73326baf0f61 /]# start-dfs.sh &amp;&amp; start-yarn.sh</span><br><span class="line">Starting namenodes on [localhost]</span><br><span class="line">The authenticity of host 'localhost (127.0.0.1)' can't be established.</span><br><span class="line">RSA key fingerprint is SHA256:Aog6oB0HvbmXPR1AyYfPBJ//tcDNp8i3kr5QGzrkQHg.</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><br><span class="line">localhost: Warning: Permanently added 'localhost' (RSA) to the list of known hosts.</span><br><span class="line">localhost: starting namenode, logging to /usr/local/hadoop-2.7.3/logs/hadoop-root-namenode-73326baf0f61.out</span><br><span class="line">localhost: starting datanode, logging to /usr/local/hadoop-2.7.3/logs/hadoop-root-datanode-73326baf0f61.out</span><br><span class="line">Starting secondary namenodes [0.0.0.0]</span><br><span class="line">The authenticity of host '0.0.0.0 (0.0.0.0)' can't be established.</span><br><span class="line">RSA key fingerprint is SHA256:Aog6oB0HvbmXPR1AyYfPBJ//tcDNp8i3kr5QGzrkQHg.</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><br><span class="line">0.0.0.0: Warning: Permanently added '0.0.0.0' (RSA) to the list of known hosts.</span><br><span class="line">0.0.0.0: starting secondarynamenode, logging to /usr/local/hadoop-2.7.3/logs/hadoop-root-secondarynamenode-73326baf0f61.out</span><br><span class="line">starting yarn daemons</span><br><span class="line">starting resourcemanager, logging to /usr/local/hadoop-2.7.3/logs/yarn-root-resourcemanager-73326baf0f61.out</span><br><span class="line">localhost: starting nodemanager, logging to /usr/local/hadoop-2.7.3/logs/yarn-root-nodemanager-73326baf0f61.out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@73326baf0f61 /]# schematool -initSchema -dbType mysql</span><br><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding in [jar:file:/usr/local/apache-hive-2.3.7-bin/lib/log4j-slf4j-impl-2.6.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: Found binding in [jar:file:/usr/local/hadoop-2.7.3/share/hadoop/common/lib/slf4j-log4j12-1.7.10.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.</span><br><span class="line">SLF4J: Actual binding is of type [org.apache.logging.slf4j.Log4jLoggerFactory]</span><br><span class="line">Metastore connection URL:        jdbc:mysql://172.18.0.2:3306/mysql?useSSL=false</span><br><span class="line">Metastore Connection Driver :    com.mysql.jdbc.Driver</span><br><span class="line">Metastore connection User:       root</span><br><span class="line">Starting metastore schema initialization to 2.3.0</span><br><span class="line">Initialization script hive-schema-2.3.0.mysql.sql</span><br><span class="line">Initialization script completed</span><br><span class="line">schemaTool completed</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">出现schemaTool completed说明连接数据库成功</span></span><br></pre></td></tr></table></figure>

<h2 id="进行验证"><a href="#进行验证" class="headerlink" title="进行验证"></a>进行验证</h2><p>访问 <a href="http://ip:50070" target="_blank" rel="noopener">http://ip:50070</a></p>
<p><img src="https://i.loli.net/2020/07/12/YqF5nvcdP86VQCT.png" alt="Snipaste_2020-07-12_11-45-52.png"></p>
<p><img src="https://i.loli.net/2020/07/12/mHrfOPY18oagAVU.png" alt="Snipaste_2020-07-12_11-46-05.png"></p>
<p>访问 <a href="http://ip:32797" target="_blank" rel="noopener">http://ip:32797</a><br><img src="https://i.loli.net/2020/07/12/5epOiV63slIJNM8.png" alt="Snipaste_2020-07-12_11-47-46.png"></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker-compose</tag>
        <tag>hadoop+hive+mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>helm部署OpenVPN 4.2.3</title>
    <url>/2020/07/06/helm%E9%83%A8%E7%BD%B2OpenPN-4-2-3/</url>
    <content><![CDATA[<p><strong>简单介绍</strong>： </p>
<p>VPN直译就是虚拟专用通道，是提供给企业之间或者个人与公司之间<a href="https://baike.baidu.com/item/安全数据传输/3166604" target="_blank" rel="noopener">安全数据传输</a>的隧道，OpenVPN无疑是Linux下开源VPN的先锋，提供了良好的性能和友好的用户GUI。 </p>
<p>它大量使用了OpenSSL加密库中的SSLv3/TLSv1协议函数库。 </p>
<p>目前OpenVPN能在Solaris、Linux、OpenBSD、FreeBSD、NetBSD、Mac OS X与Microsoft Windows以及Android和iOS上运行，并包含了许多安全性的功能。它并不是一个基于Web的VPN软件，也不与IPsec及其他VPN软件包兼容</p>
<a id="more"></a>

<p>官方仓库地址：<a href="https://hub.kubeapps.com/charts/stable/openvpn" target="_blank" rel="noopener">Kubeapps Hub</a></p>
<p>客户端下载地址：<a href="http://www.openvpn.se/" target="_blank" rel="noopener">下载地址</a></p>
<p>若该网址无法访问，可以到下面的链接进行下载</p>
<p>百度网盘：<a href="https://pan.baidu.com/s/1SCNy-DZXOHzet3SyiNYCuQ" target="_blank" rel="noopener">点击直达</a>                          提取码：l0qv</p>
<h2 id="确认集群helm安装正确"><a href="#确认集群helm安装正确" class="headerlink" title="确认集群helm安装正确"></a>确认集群helm安装正确</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master-dev ~]# helm version</span><br><span class="line">version.BuildInfo&#123;Version:"v3.1.0", GitCommit:"b29d20baf09943e134c2fa5e1e1cab3bf93315fa", GitTreeState:"clean", GoVersion:"go1.13.7"&#125;</span><br></pre></td></tr></table></figure>



<h2 id="下载Chart包，修改values-yaml文件"><a href="#下载Chart包，修改values-yaml文件" class="headerlink" title="下载Chart包，修改values.yaml文件"></a>下载Chart包，修改<code>values.yaml</code>文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm repo add stable https://kubernetes-charts.storage.googleapis.com</span><br><span class="line">helm pull stable/openvpn</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：如果上述地址无法添加到仓库，可以到<a href="http://mirror.azure.cn/kubernetes/charts/" target="_blank" rel="noopener">微软chart仓库</a>进行下载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service:</span><br><span class="line">  type: NodePort      #这里我们没有使用loadBalancer</span><br><span class="line"></span><br><span class="line">openvpn:</span><br><span class="line">  OVPN_K8S_POD_NETWORK: "10.244.0.0"</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Kubernetes pod network subnet (optional).</span></span><br><span class="line">  OVPN_K8S_POD_SUBNET: "255.255.255.0"                #这里改成对应的集群的pod地址</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">persistence:</span><br><span class="line">  enabled: true</span><br><span class="line">  storageClass: "nfs-client"     #修改成集群的storageClass名称</span><br><span class="line">  accessMode: ReadWriteOnce</span><br><span class="line">  size: 2M</span><br></pre></td></tr></table></figure>

<h2 id="部署并进行验证"><a href="#部署并进行验证" class="headerlink" title="部署并进行验证"></a>部署并进行验证</h2><p>1、部署openvpn应用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master-dev helm-chart]# helm install my-openvpn openvpn/</span><br><span class="line">NAME: my-openvpn</span><br><span class="line">LAST DEPLOYED: Tue Jul  7 14:31:04 2020</span><br><span class="line">NAMESPACE: default</span><br><span class="line">STATUS: deployed</span><br><span class="line">REVISION: 1</span><br><span class="line">TEST SUITE: None</span><br><span class="line">NOTES:</span><br><span class="line">OpenVPN is now starting.</span><br><span class="line"></span><br><span class="line">Please be aware that certificate generation is variable and may take some time (minutes).</span><br><span class="line"></span><br><span class="line">Check pod status with the command:</span><br><span class="line"></span><br><span class="line">  POD_NAME=$(kubectl get pods --namespace "default" -l app=openvpn -o jsonpath='&#123; .items[0].metadata.name &#125;') &amp;&amp; kubectl --namespace "default" logs $POD_NAME --follow</span><br><span class="line"></span><br><span class="line">LoadBalancer ingress creation can take some time as well. Check service status with the command:</span><br><span class="line"></span><br><span class="line">  kubectl --namespace "default" get svc</span><br><span class="line"></span><br><span class="line">You set the service type to NodePort, port 32085 will be used on each node.</span><br><span class="line"></span><br><span class="line">Once the external IP is available and all the server certificates are generated create client key .ovpn files by pasting the following into a shell:</span><br><span class="line"></span><br><span class="line">  POD_NAME=$(kubectl get pods --namespace "default" -l "app=openvpn,release=my-openvpn" -o jsonpath='&#123; .items[0].metadata.name &#125;')</span><br><span class="line">  SERVICE_NAME=$(kubectl get svc --namespace "default" -l "app=openvpn,release=my-openvpn" -o jsonpath='&#123; .items[0].metadata.name &#125;')</span><br><span class="line">  SERVICE_IP=$(kubectl get svc --namespace "default" "$SERVICE_NAME" -o go-template='&#123;&#123; range $k, $v := (index .status.loadBalancer.ingress 0)&#125;&#125;&#123;&#123; $v &#125;&#125;&#123;&#123;end&#125;&#125;')</span><br><span class="line">  KEY_NAME=kubeVPN</span><br><span class="line">  kubectl --namespace "default" exec -it "$POD_NAME" /etc/openvpn/setup/newClientCert.sh "$KEY_NAME" "$SERVICE_IP"</span><br><span class="line">  kubectl --namespace "default" exec -it "$POD_NAME" cat "/etc/openvpn/certs/pki/$KEY_NAME.ovpn" &gt; "$KEY_NAME.ovpn"</span><br><span class="line"></span><br><span class="line">Revoking certificates works just as easy:</span><br><span class="line">  KEY_NAME=&lt;name&gt;</span><br><span class="line">  POD_NAME=$(kubectl get pods -n "default" -l "app=openvpn,release=my-openvpn" -o jsonpath='&#123;.items[0].metadata.name&#125;')</span><br><span class="line">  kubectl -n "default" exec -it "$POD_NAME" /etc/openvpn/setup/revokeClientCert.sh $KEY_NAME</span><br><span class="line"></span><br><span class="line">Copy the resulting $KEY_NAME.ovpn file to your open vpn client (ex: in tunnelblick, just double click on the file).  Do this for each user that needs to connect to the VPN.  Change KEY_NAME for each additional user.</span><br></pre></td></tr></table></figure>



<p>下面整理一下生成clientkey的脚本,这里面的信息就是上面部署完成后输出的信息，需要修改参数<code>KEY_NAME</code>和<code>SERVICE_IP</code>,执行完成后会生成<code>wangwu.ovpn</code>的文件，客户端使用该文件作为连接凭证</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat get_clientkey.sh</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">POD_NAME=$(kubectl get pods --namespace "default" -l "app=openvpn,release=my-openvpn" -o jsonpath='&#123; .items[0].metadata.name &#125;')</span><br><span class="line">SERVICE_NAME=$(kubectl get svc --namespace "default" -l "app=openvpn,release=my-openvpn" -o jsonpath='&#123; .items[0].metadata.name &#125;')</span><br><span class="line">SERVICE_IP=10.169.68.142</span><br><span class="line">KEY_NAME=wangwu</span><br><span class="line">kubectl --namespace "default" exec -it "$POD_NAME" /etc/openvpn/setup/newClientCert.sh "$KEY_NAME" "$SERVICE_IP"</span><br><span class="line">kubectl --namespace "default" exec -it "$POD_NAME" cat "/etc/openvpn/certs/pki/$KEY_NAME.ovpn" &gt; "$KEY_NAME.ovpn"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod +x get_clientkey.sh &amp;&amp; ./get_clientkey.sh</span></span><br></pre></td></tr></table></figure>

<p>2、使用客户端验证</p>
<p>将该文件放到OpenVPN安装的目录下，<code>OpenVPN\config</code>连接后能正确获取IP说明安装成功</p>
<p><img src="https://i.loli.net/2020/07/07/osg2RKCTZyMh8Pw.png" alt="Snipaste_2020-07-07_14-55-37.png"></p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>helm</tag>
        <tag>OpenVPN</tag>
        <tag>容器</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes安装MySql 5.7主从复制集群</title>
    <url>/2020/07/05/kubernetes%E5%AE%89%E8%A3%85MySql-5-7%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h1 id="部署原理"><a href="#部署原理" class="headerlink" title="部署原理"></a>部署原理</h1><p>使用 statefulset控制器部署mysql主从集群的原理如下图所示：</p>
<p><img src="https://i.loli.net/2020/07/07/oCg3Vwx8PHvu1hB.png" alt="Snipaste_2020-07-06_21-35-04.png"></p>
<p>官方地址： <a href="https://kubernetes.io/docs/tasks/run-application/run-replicated-stateful-application/?spm=a2c4e.10696291.0.0.1efb19a4ykprHR" target="_blank" rel="noopener">Run a Replicated Stateful</a></p>
<p>参考博客：<a href="https://blog.csdn.net/qq_35887546/article/details/105957214" target="_blank" rel="noopener">CSDN博客</a> <a href="https://yq.aliyun.com/articles/646191" target="_blank" rel="noopener">阿里云博客</a></p>
<a id="more"></a>


<h1 id="使用-statefulset控制器部署mysql主从集群"><a href="#使用-statefulset控制器部署mysql主从集群" class="headerlink" title="使用 statefulset控制器部署mysql主从集群"></a>使用 statefulset控制器部署mysql主从集群</h1><h3 id="首先从资源清单创建ConfigMap"><a href="#首先从资源清单创建ConfigMap" class="headerlink" title="首先从资源清单创建ConfigMap"></a>首先从资源清单创建ConfigMap</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@master-dev mysql_cluster]# cat mysql-configmap.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql</span><br><span class="line">  labels:</span><br><span class="line">    app: mysql</span><br><span class="line">data:</span><br><span class="line">  master.cnf: |</span><br><span class="line">    # Apply this config only on the master.</span><br><span class="line">    [mysqld]</span><br><span class="line">    log-bin</span><br><span class="line">  slave.cnf: |</span><br><span class="line">    # Apply this config only on slaves.</span><br><span class="line">    [mysqld]</span><br><span class="line">    super-read-only</span><br></pre></td></tr></table></figure>

<h3 id="创建Service，提供服务的访问和负载均衡"><a href="#创建Service，提供服务的访问和负载均衡" class="headerlink" title="创建Service，提供服务的访问和负载均衡"></a>创建Service，提供服务的访问和负载均衡</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Headless service <span class="keyword">for</span> stable DNS entries of StatefulSet members.</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql</span><br><span class="line">  labels:</span><br><span class="line">    app: mysql</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - name: mysql</span><br><span class="line">    port: 3306</span><br><span class="line">  clusterIP: None</span><br><span class="line">  selector:</span><br><span class="line">    app: mysql</span><br><span class="line">---</span><br><span class="line"><span class="meta">#</span><span class="bash"> Client service <span class="keyword">for</span> connecting to any MySQL instance <span class="keyword">for</span> reads.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> For writes, you must instead connect to the master: mysql-0.mysql.</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-read</span><br><span class="line">  labels:</span><br><span class="line">    app: mysql</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - name: mysql</span><br><span class="line">    port: 3306</span><br><span class="line">  selector:</span><br><span class="line">    app: mysql</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">[root@master-dev mysql_cluster]# kubectl apply -f mysql-services.yaml</span><br><span class="line">service/mysql created</span><br><span class="line">service/mysql-read created</span><br><span class="line">[root@master-dev mysql_cluster]# kubectl get svc | grep mysql</span><br><span class="line">mysql                        ClusterIP      None             &lt;none&gt;        3306/TCP          1s</span><br><span class="line">mysql-read                   ClusterIP      10.111.232.160   &lt;none&gt;        3306/TCP          1s</span><br></pre></td></tr></table></figure>

<h3 id="部署statefulset控制器创建Pod"><a href="#部署statefulset控制器创建Pod" class="headerlink" title="部署statefulset控制器创建Pod"></a>部署statefulset控制器创建Pod</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">initContainers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-mysql</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/public_ns/mysql:5.7</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">bash</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"-c"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line">          <span class="string">set</span> <span class="string">-ex</span></span><br><span class="line">          <span class="comment"># Generate mysql server-id from pod ordinal index.</span></span><br><span class="line">          <span class="string">[[</span> <span class="string">`hostname`</span> <span class="string">=~</span> <span class="string">-([0-9]+)$</span> <span class="string">]]</span> <span class="string">||</span> <span class="string">exit</span> <span class="number">1</span></span><br><span class="line">          <span class="string">ordinal=$&#123;BASH_REMATCH[1]&#125;</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">[mysqld]</span> <span class="string">&gt;</span> <span class="string">/mnt/conf.d/server-id.cnf</span></span><br><span class="line">          <span class="comment"># Add an offset to avoid reserved server-id=0 value.</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">server-id=$((100</span> <span class="string">+</span> <span class="string">$ordinal))</span> <span class="string">&gt;&gt;</span> <span class="string">/mnt/conf.d/server-id.cnf</span></span><br><span class="line">          <span class="comment"># Copy appropriate conf.d files from config-map to emptyDir.</span></span><br><span class="line">          <span class="string">if</span> <span class="string">[[</span> <span class="string">$ordinal</span> <span class="string">-eq</span> <span class="number">0</span> <span class="string">]];</span> <span class="string">then</span></span><br><span class="line">            <span class="string">cp</span> <span class="string">/mnt/config-map/master.cnf</span> <span class="string">/mnt/conf.d/</span></span><br><span class="line">          <span class="string">else</span></span><br><span class="line">            <span class="string">cp</span> <span class="string">/mnt/config-map/slave.cnf</span> <span class="string">/mnt/conf.d/</span></span><br><span class="line">          <span class="string">fi</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">conf</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/mnt/conf.d</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-map</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/mnt/config-map</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">clone-mysql</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/hxpdocker/xtrabackup:1.0</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">bash</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"-c"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line">          <span class="string">set</span> <span class="string">-ex</span></span><br><span class="line">          <span class="comment"># Skip the clone if data already exists.</span></span><br><span class="line">          <span class="string">[[</span> <span class="string">-d</span> <span class="string">/var/lib/mysql/mysql</span> <span class="string">]]</span> <span class="string">&amp;&amp;</span> <span class="string">exit</span> <span class="number">0</span></span><br><span class="line">          <span class="comment"># Skip the clone on master (ordinal index 0).</span></span><br><span class="line">          <span class="string">[[</span> <span class="string">`hostname`</span> <span class="string">=~</span> <span class="string">-([0-9]+)$</span> <span class="string">]]</span> <span class="string">||</span> <span class="string">exit</span> <span class="number">1</span></span><br><span class="line">          <span class="string">ordinal=$&#123;BASH_REMATCH[1]&#125;</span></span><br><span class="line">          <span class="string">[[</span> <span class="string">$ordinal</span> <span class="string">-eq</span> <span class="number">0</span> <span class="string">]]</span> <span class="string">&amp;&amp;</span> <span class="string">exit</span> <span class="number">0</span></span><br><span class="line">          <span class="comment"># Clone data from previous peer.</span></span><br><span class="line">          <span class="string">ncat</span> <span class="string">--recv-only</span> <span class="string">mysql-$(($ordinal-1)).mysql</span> <span class="number">3307</span> <span class="string">|</span> <span class="string">xbstream</span> <span class="string">-x</span> <span class="string">-C</span> <span class="string">/var/lib/mysql</span></span><br><span class="line">          <span class="comment"># Prepare the backup.</span></span><br><span class="line">          <span class="string">xtrabackup</span> <span class="string">--prepare</span> <span class="string">--target-dir=/var/lib/mysql</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/lib/mysql</span></span><br><span class="line">          <span class="attr">subPath:</span> <span class="string">mysql</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">conf</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/mysql/conf.d</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/public_ns/mysql:5.7</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_ALLOW_EMPTY_PASSWORD</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">"1"</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">3306</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/lib/mysql</span></span><br><span class="line">          <span class="attr">subPath:</span> <span class="string">mysql</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">conf</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/mysql/conf.d</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">500m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">1Gi</span></span><br><span class="line">        <span class="attr">livenessProbe:</span></span><br><span class="line">          <span class="attr">exec:</span></span><br><span class="line">            <span class="attr">command:</span> <span class="string">["mysqladmin",</span> <span class="string">"ping"</span><span class="string">]</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">30</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line">        <span class="attr">readinessProbe:</span></span><br><span class="line">          <span class="attr">exec:</span></span><br><span class="line">            <span class="comment"># Check we can execute queries over TCP (skip-networking is off).</span></span><br><span class="line">            <span class="attr">command:</span> <span class="string">["mysql",</span> <span class="string">"-h"</span><span class="string">,</span> <span class="string">"127.0.0.1"</span><span class="string">,</span> <span class="string">"-e"</span><span class="string">,</span> <span class="string">"SELECT 1"</span><span class="string">]</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">5</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">2</span></span><br><span class="line">          <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">xtrabackup</span></span><br><span class="line">        <span class="attr">image:</span>  <span class="string">registry.cn-hangzhou.aliyuncs.com/hxpdocker/xtrabackup:1.0</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">xtrabackup</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">3307</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">bash</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"-c"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line">          <span class="string">set</span> <span class="string">-ex</span></span><br><span class="line">          <span class="string">cd</span> <span class="string">/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line">          <span class="comment"># Determine binlog position of cloned data, if any.</span></span><br><span class="line">          <span class="string">if</span> <span class="string">[[</span> <span class="string">-f</span> <span class="string">xtrabackup_slave_info</span> <span class="string">&amp;&amp;</span> <span class="string">"x$(&lt;xtrabackup_slave_info)"</span> <span class="string">!=</span> <span class="string">"x"</span> <span class="string">]];</span> <span class="string">then</span></span><br><span class="line">            <span class="comment"># XtraBackup already generated a partial "CHANGE MASTER TO" query</span></span><br><span class="line">            <span class="comment"># because we're cloning from an existing slave. (Need to remove the tailing semicolon!)</span></span><br><span class="line">            <span class="string">cat</span> <span class="string">xtrabackup_slave_info</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">-E</span> <span class="string">'s/;$//g'</span> <span class="string">&gt;</span> <span class="string">change_master_to.sql.in</span></span><br><span class="line">            <span class="comment"># Ignore xtrabackup_binlog_info in this case (it's useless).</span></span><br><span class="line">            <span class="string">rm</span> <span class="string">-f</span> <span class="string">xtrabackup_slave_info</span> <span class="string">xtrabackup_binlog_info</span></span><br><span class="line">          <span class="string">elif</span> <span class="string">[[</span> <span class="string">-f</span> <span class="string">xtrabackup_binlog_info</span> <span class="string">]];</span> <span class="string">then</span></span><br><span class="line">            <span class="comment"># We're cloning directly from master. Parse binlog position.</span></span><br><span class="line">            <span class="string">[[</span> <span class="string">`cat</span> <span class="string">xtrabackup_binlog_info`</span> <span class="string">=~</span> <span class="string">^(.*?)[[:space:]]+(.*?)$</span> <span class="string">]]</span> <span class="string">||</span> <span class="string">exit</span> <span class="number">1</span></span><br><span class="line">            <span class="string">rm</span> <span class="string">-f</span> <span class="string">xtrabackup_binlog_info</span> <span class="string">xtrabackup_slave_info</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">"CHANGE MASTER TO MASTER_LOG_FILE='$&#123;BASH_REMATCH[1]&#125;',\</span></span><br><span class="line"><span class="string">                  MASTER_LOG_POS=$&#123;BASH_REMATCH[2]&#125;"</span> <span class="string">&gt;</span> <span class="string">change_master_to.sql.in</span></span><br><span class="line">          <span class="string">fi</span></span><br><span class="line"></span><br><span class="line">          <span class="comment"># Check if we need to complete a clone by starting replication.</span></span><br><span class="line">          <span class="string">if</span> <span class="string">[[</span> <span class="string">-f</span> <span class="string">change_master_to.sql.in</span> <span class="string">]];</span> <span class="string">then</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">"Waiting for mysqld to be ready (accepting connections)"</span></span><br><span class="line">            <span class="string">until</span> <span class="string">mysql</span> <span class="string">-h</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">-e</span> <span class="string">"SELECT 1"</span><span class="string">;</span> <span class="string">do</span> <span class="string">sleep</span> <span class="number">1</span><span class="string">;</span> <span class="string">done</span></span><br><span class="line"></span><br><span class="line">            <span class="string">echo</span> <span class="string">"Initializing replication from clone position"</span></span><br><span class="line">            <span class="string">mysql</span> <span class="string">-h</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">\</span></span><br><span class="line">                  <span class="string">-e</span> <span class="string">"$(&lt;change_master_to.sql.in), \</span></span><br><span class="line"><span class="string">                          MASTER_HOST='mysql-0.mysql', \</span></span><br><span class="line"><span class="string">                          MASTER_USER='root', \</span></span><br><span class="line"><span class="string">                          MASTER_PASSWORD='', \</span></span><br><span class="line"><span class="string">                          MASTER_CONNECT_RETRY=10; \</span></span><br><span class="line"><span class="string">                        START SLAVE;"</span> <span class="string">||</span> <span class="string">exit</span> <span class="number">1</span></span><br><span class="line">            <span class="comment"># In case of container restart, attempt this at-most-once.</span></span><br><span class="line">            <span class="string">mv</span> <span class="string">change_master_to.sql.in</span> <span class="string">change_master_to.sql.orig</span></span><br><span class="line">          <span class="string">fi</span></span><br><span class="line"></span><br><span class="line">          <span class="comment"># Start a server to send backups when requested by peers.</span></span><br><span class="line">          <span class="string">exec</span> <span class="string">ncat</span> <span class="string">--listen</span> <span class="string">--keep-open</span> <span class="string">--send-only</span> <span class="string">--max-conns=1</span> <span class="number">3307</span> <span class="string">-c</span> <span class="string">\</span></span><br><span class="line">            <span class="string">"xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root"</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/lib/mysql</span></span><br><span class="line">          <span class="attr">subPath:</span> <span class="string">mysql</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">conf</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/mysql/conf.d</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">100Mi</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">conf</span></span><br><span class="line">        <span class="attr">emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-map</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">accessModes:</span> <span class="string">["ReadWriteOnce"]</span></span><br><span class="line">      <span class="attr">storageClassName:</span> <span class="string">"nfs-client"</span>    <span class="comment">#!!!这里需要提前创建好storageClass，或者对应的PVC</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">storage:</span> <span class="string">10Gi</span></span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://k8s.io/examples/application/mysql/mysql-statefulset.yaml</span><br><span class="line"></span><br><span class="line">kubectl get pods -l app=mysql --watch</span><br><span class="line">NAME      READY     STATUS    RESTARTS   AGE</span><br><span class="line">mysql-0   2/2       Running   0          2m</span><br><span class="line">mysql-1   2/2       Running   0          1m</span><br><span class="line">mysql-2   2/2       Running   0          1m</span><br></pre></td></tr></table></figure>

<p>如若没有storageClass，需要创建一下pv和pvc</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f cat data_pv.yaml</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">release:</span> <span class="string">"stable"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">10Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">mynfs</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Recycle</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">"/eastorage"</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">10.19</span><span class="number">.86</span><span class="number">.144</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">data1</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">release:</span> <span class="string">"stable"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">10Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">mynfs1</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Recycle</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">"/emptydir"</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">10.19</span><span class="number">.86</span><span class="number">.144</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">data2</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">release:</span> <span class="string">"stable"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">10Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">mynfs2</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Recycle</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">"/docker"</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">10.19</span><span class="number">.86</span><span class="number">.144</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f cat data_pvc.yaml</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">data-mysql-0</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">10Gi</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">mynfs</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">release:</span> <span class="string">"stable"</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">data-mysql-1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">10Gi</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">mynfs1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">release:</span> <span class="string">"stable"</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">data-mysql-2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">10Gi</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">mynfs2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">release:</span> <span class="string">"stable"</span></span><br></pre></td></tr></table></figure>

<h3 id="主从测试"><a href="#主从测试" class="headerlink" title="主从测试"></a>主从测试</h3><p>可以通过运行带有 mysql:5.7 镜像的临时容器并运行 mysql 客户端二进制文件，将测试查询发送到 MySQL 主服务器(主机名 mysql-0.mysql )</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[root@master-dev mysql]<span class="comment"># kubectl run test --image=mysql:5.7 -it -- bash</span></span><br><span class="line"></span><br><span class="line">root@test:/<span class="comment"># mysql -h mysql-0.mysql</span></span><br><span class="line"></span><br><span class="line">mysql&gt; create database redhat;</span><br><span class="line">Query OK, 1 row affected (0.11 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+<span class="comment">------------------------+</span></span><br><span class="line">| Database               |</span><br><span class="line">+<span class="comment">------------------------+</span></span><br><span class="line">| information_schema     |</span><br><span class="line">| mysql                  |</span><br><span class="line">| performance_schema     |</span><br><span class="line">| redhat                 |</span><br><span class="line">| sys                    |</span><br><span class="line">| xtrabackup_backupfiles |</span><br><span class="line">+<span class="comment">------------------------+</span></span><br><span class="line">6 rows in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure>

<p>通过访问mysql-read来查看创建的数据库是否在从库创建：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master-dev mysql_cluster]# kubectl get svc | grep mysql</span><br><span class="line">mysql                        ClusterIP      None             &lt;none&gt;        3306/TCP          11m</span><br><span class="line">mysql-read                   ClusterIP      10.111.232.160   &lt;none&gt;        3306/TCP          11m</span><br><span class="line"></span><br><span class="line">[root@master-dev mysql]# kubectl attach test -it</span><br><span class="line"></span><br><span class="line">root@test:/# mysql -h 10.111.232.160</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show databases;</span></span><br><span class="line">+------------------------+</span><br><span class="line">| Database               |</span><br><span class="line">+------------------------+</span><br><span class="line">| information_schema     |</span><br><span class="line">| mysql                  |</span><br><span class="line">| performance_schema     |</span><br><span class="line">| redhat                 |</span><br><span class="line">| sys                    |</span><br><span class="line">| xtrabackup_backupfiles |</span><br><span class="line">+------------------------+</span><br><span class="line">6 rows in set (0.05 sec)</span><br></pre></td></tr></table></figure>

<p>可以看出从库复制了主库的操作,也可以直接访问从库进行验证，本文记录的重点就是在部署statefulset时处理存储问题，需要提前准备好nfs服务，或者有动态的storageClass，否则会处于pengding状态。</p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>MySql</tag>
        <tag>5.7</tag>
        <tag>主从复制</tag>
        <tag>集群</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes部署dashboard v2.0.3</title>
    <url>/2020/07/04/kubernetes%E9%83%A8%E7%BD%B2dashboard-v2-0-3/</url>
    <content><![CDATA[<p>kubernetes部署dashboard v2.0.3</p>
<p>前言：之前部署过dashboard v1.x的版本，后来dashboard升级了，按照之前的部署方式部署后，总是出现无法访问的现象，后面又去github找到最新版的dashboard 部署方式，特此记录</p>
<a id="more"></a>

<h2 id="官方方式部署"><a href="#官方方式部署" class="headerlink" title="官方方式部署"></a>官方方式部署</h2><p>官方地址：<a href="https://github.com/kubernetes/dashboard" target="_blank" rel="noopener">https://github.com/kubernetes/dashboard</a></p>
<blockquote>
<p>说明：官方项目是使用的ClusterIP方式暴露服务，不利于我们进行访问验证</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.3/aio/deploy/recommended.yaml</span></span><br></pre></td></tr></table></figure>



<h2 id="优化后部署"><a href="#优化后部署" class="headerlink" title="优化后部署"></a>优化后部署</h2><p>我将此服务改为NodePort方式进行部署，方便后续进行测试，镜像地址也修改为阿里云仓库的地址</p>
<p>文件地址：<a href="https://github.com/pythonTaotao/kubernetes/tree/master/dashboard" target="_blank" rel="noopener">点击直达</a></p>
<h3 id="部署资源清单"><a href="#部署资源清单" class="headerlink" title="部署资源清单"></a>部署资源清单</h3><h3 id="Getting-a-Bearer-Token"><a href="#Getting-a-Bearer-Token" class="headerlink" title="Getting a Bearer Token"></a>Getting a Bearer Token</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk '&#123;print $1&#125;')</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/07/05/GvgjHcYspS6afKx.png" alt="Snipaste_2020-07-05_11-18-00.png"></p>
<h3 id="查看服务端口"><a href="#查看服务端口" class="headerlink" title="查看服务端口"></a>查看服务端口</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vmlabmaster-dev ~]# kubectl get svc -n kubernetes-dashboard</span><br><span class="line">NAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">dashboard-metrics-scraper   ClusterIP   10.100.164.29    &lt;none&gt;        8000/TCP        11h</span><br><span class="line">kubernetes-dashboard        NodePort    10.107.131.103   &lt;none&gt;        443:32136/TCP   11h</span><br></pre></td></tr></table></figure>

<h3 id="登陆验证"><a href="#登陆验证" class="headerlink" title="登陆验证"></a>登陆验证</h3><p><a href="https://IP:Port">https://IP:Port</a></p>
<p><img src="https://i.loli.net/2020/07/05/eqncJ2HbXDmBE4R.png" alt="Snipaste_2020-07-05_11-20-30.png"></p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>dashboard</tag>
        <tag>UI</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot项目部署到k8s集群</title>
    <url>/2020/07/03/Springboot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0k8s%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h2 id="Springboot快速入门"><a href="#Springboot快速入门" class="headerlink" title="Springboot快速入门"></a>Springboot快速入门</h2><p>简介：Springboot使你可以非常容器的创建一个独立的、生产级的、基于spring的应用。它大量简化了使用spring带来的繁琐的配置，大部分基于SpringBoot的应用只需要一点点的配置</p>
<p><strong>特征：</strong></p>
<ul>
<li><p>独立的spring应用（内置tomcat、jetty，无需部署war包）</p>
</li>
<li><p>提供 丰富的”starter”依赖，简化应用构建配置</p>
</li>
<li><p>自动配置spring和第三方依赖库</p>
</li>
<li><p>没有代码生成，没有xml配置</p>
</li>
<li><p>提供准生成功能，如指标，健康检查和外部配置</p>
</li>
</ul>
<p>访问官网：<a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a></p>
<a id="more"></a>

<p>确定整个实现步骤</p>
<h2 id="确定整个实现步骤"><a href="#确定整个实现步骤" class="headerlink" title="确定整个实现步骤"></a>确定整个实现步骤</h2><blockquote>
<p>项目介绍：该项目是使用Springboot框架开发的简单的考勤签到系统，依赖MySql数据库记录数据，能够实现注册、登陆、签到、修改个人信息，查看签到记录等功能</p>
</blockquote>
<p>源码地址：<a href="https://github.com/pythonTaotao/kubernetes/tree/master/Project/HHUDBExam" target="_blank" rel="noopener">考勤签到Springboot项目</a></p>
<p><img src="https://i.loli.net/2020/07/04/eMzmQkAi5Wtr96X.png" alt="Snipaste_2020-07-04_15-06-50.png"></p>
<h2 id="将服务制作成基础镜像"><a href="#将服务制作成基础镜像" class="headerlink" title="将服务制作成基础镜像"></a>将服务制作成基础镜像</h2><p>1、该项目基于Java的Springboot框架开发，所以基础镜像使用 openjdk镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull openjdk:8-jre-alpine</span><br></pre></td></tr></table></figure>

<p>2、使用mvn将该项目打包成jar包，需提前在服务器配置好Java和maven的环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/07/04/OG5oJmiWcrI2uCR.png" alt="Snipaste_2020-07-04_15-12-16.png"></p>
<p>在<code>target/</code>下会生成<code>hhu-dbexam-0.0.1-SNAPSHOT.jar</code>的文件，可以先在本地测试一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar hhu-dbexam-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/07/04/O2YWvoFuxph7jSk.png" alt="Snipaste_2020-07-04_15-14-04.png"></p>
<p>3、使用Dockerfile构建docker，推送到我们的阿里云镜像仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat Dockerfile</span></span><br><span class="line">FROM openjdk:8-jre-alpine</span><br><span class="line">COPY target/hhu-dbexam-0.0.1-SNAPSHOT.jar /hhu-dbexam-0.0.1-SNAPSHOT.jar</span><br><span class="line">ENTRYPOINT ["java","-jar","/hhu-dbexam-0.0.1-SNAPSHOT.jar"]</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build -t springboot-web:v1 .</span></span><br></pre></td></tr></table></figure>



<h2 id="部署依赖服务MySQL"><a href="#部署依赖服务MySQL" class="headerlink" title="部署依赖服务MySQL"></a>部署依赖服务MySQL</h2><p>这里也是使用Pod进行部署，但未做数据持久化，下面是<code>mysql-rc.yaml</code>部署文件内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicationController</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">hub.c.163.com/library/mysql</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">3306</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">"123456"</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">msyql-service</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">3306</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">3306</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure>



<p>修改代码中链接信息，使其能够连接数据库，url也要对应进行修改</p>
<p><img src="https://i.loli.net/2020/07/04/7GQeA1ICsHWJwdc.png" alt="Snipaste_2020-07-04_15-24-38.png"></p>
<p>创建对应的数据库和表，添加数据库字段</p>
<p> 学生信息表的设计如下：</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>数据类型</th>
<th>长度</th>
<th>主键</th>
<th>是否非空</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>int</td>
<td>10</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>stuno</td>
<td>int</td>
<td>20</td>
<td>no</td>
<td>yes</td>
</tr>
<tr>
<td>name</td>
<td>varchar</td>
<td>30</td>
<td>no</td>
<td>yes</td>
</tr>
<tr>
<td>password</td>
<td>varchar</td>
<td>20</td>
<td>no</td>
<td>yes</td>
</tr>
<tr>
<td>classid</td>
<td>varchar</td>
<td>20</td>
<td>no</td>
<td>no</td>
</tr>
<tr>
<td>email</td>
<td>varchar</td>
<td>20</td>
<td>no</td>
<td>no</td>
</tr>
<tr>
<td>phone</td>
<td>varchar</td>
<td>30</td>
<td>no</td>
<td>no</td>
</tr>
</tbody></table>
<p>学生信息表的字段格式说明如下：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>学号</th>
<th>姓名</th>
<th>密码</th>
<th>班级</th>
<th>邮箱</th>
<th>电话</th>
</tr>
</thead>
<tbody><tr>
<td>01</td>
<td>1706010302</td>
<td>测试</td>
<td>123556</td>
<td>计算机六班</td>
<td><a href="mailto:12321@qq.com">12321@qq.com</a></td>
<td>1525252</td>
</tr>
</tbody></table>
<p>考勤记录表的设计如下：</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>数据类型</th>
<th>长度</th>
<th>主键</th>
<th>是否为空</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>inr</td>
<td>10</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>stuno</td>
<td>varchar</td>
<td>20</td>
<td>no</td>
<td>yes</td>
</tr>
<tr>
<td>name</td>
<td>varchar</td>
<td>30</td>
<td>no</td>
<td>yes</td>
</tr>
<tr>
<td>puch_intimr</td>
<td>datetime</td>
<td></td>
<td>no</td>
<td>yes</td>
</tr>
</tbody></table>
<p> 考勤记录表的字段格式说明如下：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>学号</th>
<th>姓名</th>
<th>签到时间</th>
</tr>
</thead>
<tbody><tr>
<td>01</td>
<td>1706010302</td>
<td>测试</td>
<td>2020-04-29  09:27:17</td>
</tr>
</tbody></table>
<p>下面是数据库导出的<code>hhu_dbexam.sql</code>文件</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Navicat MySQL Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Source Server         : 10.139.8.42</span></span><br><span class="line"><span class="comment">Source Server Version : 50718</span></span><br><span class="line"><span class="comment">Source Host           : 10.139.8.42:31645</span></span><br><span class="line"><span class="comment">Source Database       : hhu_dbexam</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Target Server Type    : MYSQL</span></span><br><span class="line"><span class="comment">Target Server Version : 50718</span></span><br><span class="line"><span class="comment">File Encoding         : 65001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Date: 2020-07-04 15:28:28</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for punch_in</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`punch_in`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`punch_in`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`stuno`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`puch_intimr`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of punch_in</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for student</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`student`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`stuno`</span> <span class="built_in">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`classid`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">5</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of student</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'176815'</span>, <span class="string">'张三'</span>, <span class="string">'123'</span>, <span class="string">'计算机1班'</span>, <span class="string">'9830666999@qq.com'</span>, <span class="string">'17688903055'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'1111111'</span>, <span class="string">'李四'</span>, <span class="string">'123123'</span>, <span class="string">'1111'</span>, <span class="string">'11111@qq.com'</span>, <span class="string">'17688903066'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'123456'</span>, <span class="string">'李四'</span>, <span class="string">'123'</span>, <span class="string">'计算机1班'</span>, <span class="string">'888888@qq.com'</span>, <span class="string">'15971488899'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'111111'</span>, <span class="string">'王五'</span>, <span class="string">'123'</span>, <span class="string">'计算机2班'</span>, <span class="string">'1111@11.com'</span>, <span class="string">'18788899999'</span>);</span><br></pre></td></tr></table></figure>



<h2 id="制作k8s服务并调度"><a href="#制作k8s服务并调度" class="headerlink" title="制作k8s服务并调度"></a>制作k8s服务并调度</h2><p>这个项目我们需要使用web界面进行访问，我们使用deploment创建Pod，需要使用NodePort进行暴露或者Ingress域名访问服务</p>
<p> 下面是<code>springboot-web.yaml</code>部署文件内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">springboot-web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">springboot-web</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">springboot-web</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">springboot-web</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/other_ns/springboot-web:v1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">springboot-web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">springboot-web</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure>

<p>部署上述文件后查看pod和service是否正常运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master-dev HHUDBExam]# kubectl get po |grep springboot</span><br><span class="line">springboot-web-67f69d94f5-59wjh               1/1     Running   0          53s</span><br><span class="line">[root@master-dev HHUDBExam]# kubectl get svc | grep springboot-web</span><br><span class="line">springboot-web               NodePort    10.110.69.65     &lt;none&gt;        80:31706/TCP      59s</span><br></pre></td></tr></table></figure>

<p>我们访问 <a href="http://ip:31706访问我们的服务">http://ip:31706访问我们的服务</a></p>
<p><img src="https://i.loli.net/2020/07/04/ozrNU6ZfjB2QX4S.png" alt="Snipaste_2020-07-04_15-34-35.png"></p>
<p>至此，我们一个Springboot项目就完成在k8s上面的部署，总结一下流程，先找到基础镜像，在搞定运行的文件，然后将文件打包到镜像里面，最后在k8s上确定调度策略，部署服务。</p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>容器化</tag>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>kubeadm部署单master节点kubernetes集群</title>
    <url>/2020/06/30/kubeadm%E9%83%A8%E7%BD%B2%E5%8D%95master%E8%8A%82%E7%82%B9kubernetes%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<p>Kubeadm 是一个官方推荐部署kubernetes工具，降低了部署难度，提高效率它提供了 <code>kubeadm init</code> 以及 <code>kubeadm join</code> 这两个命令作为快速创建 kubernetes 集群的最佳实践。kubeadm 通过执行必要的操作来启动和运行一个最小可用的集群。它被故意设计为只关心启动集群，而不是准备节点环境的工作。同样的，诸如安装各种各样的可有可无的插件，也不再它的负责范围</p>
<a id="more"></a>
<h2 id="安装前准备环境"><a href="#安装前准备环境" class="headerlink" title="安装前准备环境"></a><strong>安装前准备环境</strong></h2><p>OS：CentOS 7.6 x86_64</p>
<p>Container runtime：Docker-ce 19.03</p>
<p>Kubernetes：1.17.0</p>
<table>
<thead>
<tr>
<th>IP地址</th>
<th>主机名</th>
<th>角色</th>
<th>CPU</th>
<th>Memory</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.100.150</td>
<td>master</td>
<td>master</td>
<td>&gt;=2c</td>
<td>&gt;=2G</td>
</tr>
<tr>
<td>192.168.100.156</td>
<td>node01</td>
<td>node</td>
<td>&gt;=2c</td>
<td>&gt;=2G</td>
</tr>
<tr>
<td>192.168.100.157</td>
<td>node02</td>
<td>node</td>
<td>&gt;=2c</td>
<td>&gt;=2G</td>
</tr>
</tbody></table>
<h3 id="编辑Master和各node的-etc-hosts-使其能够使用主机名解析"><a href="#编辑Master和各node的-etc-hosts-使其能够使用主机名解析" class="headerlink" title="编辑Master和各node的/etc/hosts,使其能够使用主机名解析"></a>编辑Master和各node的/etc/hosts,使其能够使用主机名解析</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.100.150 master master </span><br><span class="line">192.168.100.156 node01 node01 </span><br><span class="line">192.168.100.157 node02 node02</span><br></pre></td></tr></table></figure>

<h3 id="主机时间同步"><a href="#主机时间同步" class="headerlink" title="主机时间同步"></a>主机时间同步</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> chronyd.service </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl status chronyd.service</span></span><br></pre></td></tr></table></figure>

<h3 id="关闭防火墙和Selinux服务"><a href="#关闭防火墙和Selinux服务" class="headerlink" title="关闭防火墙和Selinux服务"></a>关闭防火墙和Selinux服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> setenforce 0  </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/selinux/config  </span></span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure>

<h3 id="禁用Swap虚拟内存"><a href="#禁用Swap虚拟内存" class="headerlink" title="禁用Swap虚拟内存"></a>禁用Swap虚拟内存</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> swapoff -a </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sed -i <span class="string">'s/.*swap.*/#&amp;/'</span> /etc/fstab</span></span><br></pre></td></tr></table></figure>

<h2 id="部署kubernetes集群"><a href="#部署kubernetes集群" class="headerlink" title="部署kubernetes集群"></a><strong>部署kubernetes集群</strong></h2><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p><a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">官方安装教程</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://download.docker.com/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install -y docker-ce</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl start docker &amp;&amp; systemctl <span class="built_in">enable</span> docker</span></span><br></pre></td></tr></table></figure>

<p>配置docker镜像下载加速</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/docker/daemon.josn</span><br><span class="line">&#123;</span><br><span class="line">  "registry-mirrors": [ "https://registry.docker-cn.com" ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl daemon-reload &amp;&amp; systemctl restart docker</span></span><br></pre></td></tr></table></figure>

<h3 id="配置内核参数"><a href="#配置内核参数" class="headerlink" title="配置内核参数"></a>配置内核参数</h3><p>将桥接的IPv4流量传递到iptables的链 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt;EOF </span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1 </span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1 </span><br><span class="line">EOF </span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sysctl --system</span></span><br></pre></td></tr></table></figure>

<h3 id="配置国内kuberneetes的yum源"><a href="#配置国内kuberneetes的yum源" class="headerlink" title="配置国内kuberneetes的yum源"></a>配置国内kuberneetes的yum源</h3><p>由于网络原因，中国无法直接连接到google的网络，需要配置阿里云的yum源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo [kubernetes] </span></span><br><span class="line">name=Kubernetes baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/ </span><br><span class="line">enabled=1 </span><br><span class="line">gpgcheck=1 </span><br><span class="line">repo_gpgcheck=1 </span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h3 id="安装kubectl、kubeadm、kubelet"><a href="#安装kubectl、kubeadm、kubelet" class="headerlink" title="安装kubectl、kubeadm、kubelet"></a>安装kubectl、kubeadm、kubelet</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master ~]# yum install -y kubelet-1.17.0 kubeadm-1.17.0 kubectl-1.17.0</span><br><span class="line">[root@node01 ~]# yum install -y kubelet-1.17.0 kubeadm-1.17.0</span><br></pre></td></tr></table></figure>

<p>Kubelet负责与其他节点集群通信，并进行本节点Pod和容器生命周期的管理。</p>
<p>温馨提示：如果yum安装提示找不到镜像之类的，请yum makecache更新下yum源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl daemon-reload </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> kubelet     <span class="comment">#master和node节点设置开机自启动kubelet</span></span></span><br></pre></td></tr></table></figure>

<h3 id="初始化集群，在master上执行kubeadm-init"><a href="#初始化集群，在master上执行kubeadm-init" class="headerlink" title="初始化集群，在master上执行kubeadm init"></a>初始化集群，在master上执行kubeadm init</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master ~]# kubeadm init --kubernetes-version=1.17.0 \</span><br><span class="line">--apiserver-advertise-address=192.168.110.156. \</span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers \ </span><br><span class="line">--service-cidr=10.96.0.0/12 \ </span><br><span class="line">--pod-network-cidr=10.244.0.0/16  </span><br><span class="line"></span><br><span class="line">//以下是执行完毕后输出的部分信息 Your Kubernetes control-plane has initialized successfully!  </span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:  </span><br><span class="line"></span><br><span class="line">	mkdir -p $HOME/.kube</span><br><span class="line">	sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config  </span><br><span class="line">	sudo chown $(id -u):$(id -g) $HOME/.kube/config  </span><br><span class="line">	</span><br><span class="line">You should now deploy a pod network to the cluster. Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:  </span><br><span class="line"></span><br><span class="line">	https://kubernetes.io/docs/concepts/cluster-administration/addons/  </span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:  </span><br><span class="line"></span><br><span class="line">kubeadm join 192.168.100.156:6443 --token cxins6.pxbyomo4pp1mnrao \   </span><br><span class="line">	--discovery-token-ca-cert-hash sha256:35876ef6f2e5fe7eb5c7bb709dbd5e09d0e9e7d3adf41cbe708eec4fb586c8d6</span><br></pre></td></tr></table></figure>

<ul>
<li><p>–kubernetes-version 正在使用的Kubernetes程序组件的版本号，需要与kubelet 的版本号相同 </p>
</li>
<li><p>–pod-network-cidr : Pod网络的地址范围，其值为CIDR格式的网络地址；使用flannel网络插件时，其默认地址为10.244.0.0/16 </p>
</li>
<li><p>–service-cidr: Service 的网络地址范围，其值为CIDR格式的网络地址，默认地址为10.96.0.0/12 </p>
</li>
<li><p>–apiserver-advertise-address : API server通告给其他组件的IP地址 ，一般应该为Master节点的 IP 地址，0.0.0.0 表示节点上所有可用的地址选择其中一个 </p>
<p>使用systemd作为docker的cgroup driver可以确保服务器节点在资源紧张的情况更加稳定，因此这里修改各个节点上docker的cgroup driver为systemd。</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建或修改/etc/docker/daemon.json： </span></span><br><span class="line">&#123; </span><br><span class="line">"exec-opts": ["native.cgroupdriver=systemd"] </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">重启docker： $ systemctl restart docker </span></span><br><span class="line"><span class="meta">#</span><span class="bash">验证 docker info | grep Cgroup </span></span><br><span class="line">Cgroup Driver: systemd</span><br></pre></td></tr></table></figure>

<h3 id="配置kubectl工具"><a href="#配置kubectl工具" class="headerlink" title="配置kubectl工具"></a>配置kubectl工具</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@K8sMaster ~]# mkdir -p /root/.kube </span><br><span class="line">[root@K8sMaster ~]# sudo cp /etc/kubernetes/admin.conf /root/.kube/config  [root@K8sMaster ~]# sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">[root@K8sMaster ~]# kubectl get cs </span><br><span class="line">NAME                STATUS  MESSAGE       </span><br><span class="line">ERROR etcd-0        Healthy  &#123;"health":"true"&#125;  </span><br><span class="line">controller-manager  Healthy  ok         </span><br><span class="line">scheduler           Healthy  ok</span><br></pre></td></tr></table></figure>

<p> 上面的STATUS结果为”Healthy”，表示组件处于健康状态，否则需要检查错误，如果排除不了问题，可以使用”kubeadm reset” 命令重置集群后重新初始化</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master ~]# kubectl get nodes </span><br><span class="line">NAME     STATUS    ROLES   AGE  VERSION </span><br><span class="line">master   NotReady  master  10m  v1.17.0</span><br></pre></td></tr></table></figure>

<p>此时的Master处于”NotReady”（未就绪），因为集群中尚未安装网络插件，部署完网络后会ready,下面部署flannel</p>
<h3 id="部署flannel网络"><a href="#部署flannel网络" class="headerlink" title="部署flannel网络"></a>部署flannel网络</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span></span><br></pre></td></tr></table></figure>

<p>下面看下集群的状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get nodes </span></span><br><span class="line">NAME    STATUS  ROLES   AGE  VERSION </span><br><span class="line">master  Ready   master  17m  v1.17.0</span><br></pre></td></tr></table></figure>

<p>集群处于Ready状态，node节点可以加入集群中</p>
<h3 id="node节点加入集群"><a href="#node节点加入集群" class="headerlink" title="node节点加入集群"></a>node节点加入集群</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@node01 ~]# kubeadm join 192.168.100.156:6443 --token 2dt1wp.oudskargctjss991 \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:15aa0537c14d50df4fc9f45b6bdff0c30f8ef7114463a12e022e33619936266c  </span><br><span class="line"></span><br><span class="line">//以下是部分输出信息  </span><br><span class="line"></span><br><span class="line">This node has joined the cluster: * Certificate signing request was sent to apiserver and a response was received. * The Kubelet was informed of the new secure connection details.</span><br><span class="line"></span><br><span class="line">Run 'kubectl get nodes' on the control-plane to see this node join the cluster.</span><br></pre></td></tr></table></figure>

<p>执行完毕后稍等一会，在主节点上查看集群的状态，到这里我们一个最简单的包含最核心组件的集群搭建完毕！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get nodes</span></span><br><span class="line">NAME       STATUS   ROLES   AGE    VERSION </span><br><span class="line">master     Ready    master  34m    v1.17.0 </span><br><span class="line">node01     Ready    &lt;none&gt;  6m14s  v1.17.0</span><br><span class="line">node02     Ready    &lt;none&gt;  6m8s   v1.17.0</span><br></pre></td></tr></table></figure>



<h2 id="安装其他附件组件"><a href="#安装其他附件组件" class="headerlink" title="安装其他附件组件"></a><strong>安装其他附件组件</strong></h2><h3 id="查看集群的版本"><a href="#查看集群的版本" class="headerlink" title="查看集群的版本"></a>查看集群的版本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl version --short </span></span><br><span class="line">Client Version: v1.14.3 </span><br><span class="line">Server Version: v1.14.3</span><br></pre></td></tr></table></figure>

<h3 id="安装dashboard，使用UI界面管理集n"><a href="#安装dashboard，使用UI界面管理集n" class="headerlink" title="安装dashboard，使用UI界面管理集n"></a>安装dashboard，使用UI界面管理集n</h3><h3 id="下面的方式已经废弃，请参考新版本部署方式"><a href="#下面的方式已经废弃，请参考新版本部署方式" class="headerlink" title="下面的方式已经废弃，请参考新版本部署方式"></a>下面的方式已经废弃，请参考新版本部署方式</h3><p><a href="[https://pythontaotao.github.io/2020/07/04/kubernetes%E9%83%A8%E7%BD%B2dashboard-v2-0-3/](https://pythontaotao.github.io/2020/07/04/kubernetes部署dashboard-v2-0-3/)">kubernetes部署dashboard v2.0.3</a></p>
<p>创建dashboard的yaml文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml</span></span><br></pre></td></tr></table></figure>

<p>修改部分配置文件内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed -i <span class="string">'s/k8s.gcr.io/loveone/g'</span> kubernetes-dashboard.yaml $ sed -i <span class="string">'/targetPort:/a\ \ \ \ \ \ nodePort: 30001\n\ \ type: NodePort'</span> kubernetes-dashboard.yaml</span></span><br></pre></td></tr></table></figure>

<p>部署dashboard</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master ~]# kubectl create -f kubernetes-dashboard.yaml </span><br><span class="line">secret/kubernetes-dashboard-certs created </span><br><span class="line">serviceaccount/kubernetes-dashboard created </span><br><span class="line">role.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created deployment.apps/kubernetes-dashboard created service/kubernetes-dashboard created</span><br></pre></td></tr></table></figure>

<p>创建完成后，检查各服务运行状态 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master ~]# kubectl get deployment kubernetes-dashboard -n kube-system</span><br><span class="line">NAME                   READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">kubernetes-dashboard   1/1     1            1           89s</span><br><span class="line"></span><br><span class="line">[root@master ~]# kubectl get services -n kube-system</span><br><span class="line">NAME                   TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                  AGE</span><br><span class="line">kube-dns               ClusterIP   10.96.0.10       &lt;none&gt;        53/UDP,53/TCP,9153/TCP   61m</span><br><span class="line">kubernetes-dashboard   NodePort    10.102.234.209   &lt;none&gt;        443:30001/TCP            16m</span><br><span class="line">[root@master ~]# netstat -ntlp|grep 30001</span><br><span class="line">tcp6       0      0 :::30001                :::*                    LISTEN      17306/kube-proxy</span><br></pre></td></tr></table></figure>

<p>使用Firefox浏览器输入Dashboard访问地址：<a href="https://192.168.100.156:30001" target="_blank" rel="noopener">https://192.168.100.156:30001</a> </p>
<p>这里使用其他如chrome会提示安全问题无法连接！！！</p>
<p>查看访问Dashboard的token</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master ~]# kubectl create serviceaccount  dashboard-admin -n kube-system</span><br><span class="line">serviceaccount/dashboard-admin created</span><br><span class="line">[root@master ~]# kubectl create clusterrolebinding  dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/dashboard-admin created</span><br><span class="line">[root@master ~]# kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk '/dashboard-admin/&#123;print $1&#125;')</span><br><span class="line">Name:         dashboard-admin-token-9hglw</span><br><span class="line">Namespace:    kube-system</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: dashboard-admin</span><br><span class="line">              kubernetes.io/service-account.uid: 30efdd50-92bd-11e9-91e3-000c296bd9bc</span><br><span class="line"> </span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"> </span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1025 bytes</span><br><span class="line">namespace:  11 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4tOWhnbHciLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiMzBlZmRkNTAtOTJiZC0xMWU5LTkxZTMtMDAwYzI5NmJkOWJjIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmRhc2hib2FyZC1hZG1pbiJ9.Bg9FOIr6RkepjCFav8tbkbTALGEX7bZJMNOYMOrYhFPhnhCs1RSxop7pCGBtdjug_Zpsb9UJ1WNWTsCInUlMYtSHkbaqVLZQEdIgD6jGb177CxIZBcCuxmxxQm0JMJdYjc6Y_1wYSTJGHtmWOHa70pUEcKo9I0LonTUfHCZh5PgS3JrwiTrsqe1RGyz3Jz4p9EIVPfcxmKCowSuapinOTezAWK2XAUhk2h5utXgag6RRnrPcHtlncZzW5fMTSfdAZv5xlaI64AM__qiwOTqyK-14xkda5nbk9DGhN5UwhkHzyvU6ApGT7A9Tr3j3QkMov9gEyVIDbSbBaSj8xBt36Q</span><br></pre></td></tr></table></figure>



<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDcvMDEvb2FSZVRWbVo0RUhsd1k4LnBuZw?x-oss-process=image/format,png" alt="k8sdashboardlogin.png"></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDcvMDEveGs3ZWZtamJPeXFWRlQ2LnBuZw?x-oss-process=image/format,png" alt="k8sdashboardweb.png"></p>
<h3 id="重置集群初始状态"><a href="#重置集群初始状态" class="headerlink" title="重置集群初始状态"></a>重置集群初始状态</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm reset</span><br></pre></td></tr></table></figure>

<h2 id="检查集群功能"><a href="#检查集群功能" class="headerlink" title="检查集群功能"></a><strong>检查集群功能</strong></h2><h3 id="测试DNS功能"><a href="#测试DNS功能" class="headerlink" title="测试DNS功能"></a>测试DNS功能</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl  apply -f dns-test-busybox.yaml </span><br><span class="line"></span><br><span class="line">kubectl exec -ti busybox -- nslookup kubernetes.default</span><br></pre></td></tr></table></figure>


<p><code>dns-test-busybox.yaml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">busybox:1.28</span>          <span class="comment">#注意这个busybox的版本是个坑</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sleep</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"3600"</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br></pre></td></tr></table></figure>

<h3 id="部署一个Nginx应用"><a href="#部署一个Nginx应用" class="headerlink" title="部署一个Nginx应用"></a>部署一个Nginx应用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master ~]# kubectl apply -f nginx-deployment.yaml</span><br><span class="line">deployment.apps/nginx-deployment created</span><br></pre></td></tr></table></figure>


<p><code>nginx-deployment.yaml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.7.9</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-service</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 88</span><br><span class="line">    targetPort: 80</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br><span class="line">  type: NodePort</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubeadm</tag>
        <tag>kubernetes部署</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes基础概念入门</title>
    <url>/2020/06/29/kubernetes%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>Kubernetes (K8s) is an open-source system for automating deployment, scaling, and management of containerized applications.</p>
<p>k8s是一个开源的云操作系统，能够用来自动化部署，扩缩容和管理我们的容器应用，简单来说，就是提供了容器编排和管理功能的系统</p>
<a id="more"></a>

<h1 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h1><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDYvMzAvSHRUR0U5TllLYjZja3kyLnBuZw?x-oss-process=image/format,png" alt="u_325710987,885711381_fm_26_gp_0.jpg"></p>
<p><strong>Master：</strong></p>
<ul>
<li>ApiServer：提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制；</li>
<li>Scheduler：负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上；</li>
<li>Controller-Manager：负责维护集群的状态，比如故障检测、自动扩展、滚动更新等；</li>
<li>ETCD：保存了整个集群的所有信息；</li>
</ul>
<p><strong>node：</strong></p>
<ul>
<li>Kubelet ：负责维护容器的生命周期，同时也负责Volume（CVI）和网络（CNI）的管理；</li>
<li>docker：负责镜像管理以及Pod和容器的真正运行（CRI）；</li>
<li>kubeproxy：负责为Service提供cluster内部的服务发现和负载均衡；</li>
</ul>
<p><strong>核心附件：</strong></p>
<ul>
<li>CoreDNS：负责为整个集群提供DNS服务</li>
<li>Dashboard：提供一个简单的GUI界面来查看集群信息和操作集群</li>
<li>Ingress：为服务提供外网入口，提供域名访问服务功能</li>
<li>Flannel：为集群之间提供网络连接服务，分配pod和serviceIP功能</li>
</ul>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a><strong>基本概念</strong></h1><ol>
<li><p><strong>容器</strong>：一种轻量级、可移植、自包含的软件打包技术</p>
</li>
<li><p><strong>Master</strong>：为用户可和服暴露API，以最优方式调度工作负载，编排其他组件</p>
</li>
<li><p><strong>Pod</strong>: k8s最小调度单位，封装了一个或者多个容器的资源对象，Pod内所有容器共享命名空间和存储资源，类比<u><strong>豌豆荚</strong></u>  </p>
</li>
<li><p><strong>资源标签</strong>：一个键值型（key/value）数据，辨别pod的属性，或者帮助Scheduler来进行调度</p>
</li>
<li><p><strong>标签选择器</strong>： Lable Selector，根据标签过滤符合条件的资源对象</p>
</li>
<li><p><strong>namespace</strong>：资源对象的隔离，Service、Deployment、Pod</p>
</li>
<li><p><strong>Volume</strong>：存储卷，独立于容器文件系统的存储空间，为容器提供持久存储能力</p>
</li>
<li><p><strong>Pod控制器</strong>：用户不会直接部署管理pod，借助另一个抽象的工具【控制器(control) 】进行管理，保证副本数量达到预期</p>
</li>
</ol>
<p>以下是Control的类型和功能列表</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>功能</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>ReplicationController</td>
<td>保证Pod的副本数达到预期</td>
<td>几乎废弃</td>
</tr>
<tr>
<td>ReplicaSet</td>
<td>新一代RC，支持基于集合的标签选择器</td>
<td>新一代控制器</td>
</tr>
<tr>
<td>Deployment</td>
<td>是最常用的管理无状态的pod，构建于RS之上</td>
<td>支持基于集合（ set-based ）的标签选择器，以及它的滚动更新（ Rolling-Update ）机制,区别于RS的地方</td>
</tr>
<tr>
<td>StatefulSet</td>
<td>有状态的持久化应用，如database，为每个Pod创建独特标识，确保Pod间顺序性</td>
<td></td>
</tr>
<tr>
<td>DaemonSet</td>
<td>用于确保每个节点都运行某Pod的一个副本，新增节点也会被添加此类Pod,用于运行集群存储守护进程，如ceph和glusterd,日志收集进程fluentd、logstash以及监控进程，prometheus的Node Exporter等</td>
<td></td>
</tr>
<tr>
<td>Job</td>
<td>运行完成后可终止的应用，如批处理作业任务</td>
<td></td>
</tr>
</tbody></table>
<ol start="9">
<li><strong>命名空间</strong></li>
</ol>
<p>作用：资源配额的隔离：CPU、Memory</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get namespace</span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   28d</span><br><span class="line">kube-public       Active   28d</span><br><span class="line">kube-system       Active   28d</span><br></pre></td></tr></table></figure>

<p>创建一个命名空间</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat namesapce-dev.yaml </span></span><br><span class="line">apiVersion: v1 </span><br><span class="line">kind: Namespace </span><br><span class="line">metadata:  </span><br><span class="line">  name: dev </span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl create -f namesapce-dev.yaml</span></span><br></pre></td></tr></table></figure>

<p>简单命令创建</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl create ns dev</span><br><span class="line"></span><br><span class="line">kubectl get all -n kube-system    #查看一个命名空间下所有的内容</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：不同命名空间下SvcIP、PodIP是可以访问的,是对名字的隔离    </p>
</blockquote>
<h2 id="k8s服务、网络、存储概念"><a href="#k8s服务、网络、存储概念" class="headerlink" title="k8s服务、网络、存储概念"></a>k8s服务、网络、存储概念</h2><h3 id="Service概念"><a href="#Service概念" class="headerlink" title="Service概念"></a><strong>Service概念</strong></h3><p>​    Service 是建立在一组Pod 对象之上的资源抽象，它通过标签选择器选定一组Pod 对象，并为这组Pod 对象定义一个统一的固定访问入口（通常是一个IP 地址），若K8s 集群存在DNS 附件，它就会在Service 创建时为其自动配置一个DNS 名称以便客户端进行服务发现。到达Service IP 的请求将被负载均衡至其后的端点一一各个Pod 对象之上，Service从本质上来讲是一个<strong>四层</strong>代理服务。另外，Service 还可以将集群外部流量引入到集群中来。</p>
<h3 id="Service类型"><a href="#Service类型" class="headerlink" title="Service类型"></a><strong>Service类型</strong></h3><ul>
<li><p><strong>第一种</strong>是仅用于集群内部通信的ClusterIP类型；</p>
</li>
<li><p><strong>第二种</strong>是接入集群外部请求的NodePort 类型它工作于每个节点的主机IP 之上；</p>
</li>
<li><p><strong>第三种</strong>是LoadBalancer 类型，可以把外部请求负载均衡至多个Node 的主机IP 的NodePort 之上</p>
<p>此三种类型中，每一种都以其前一种为基础才能实现，而且第三种类型中的LoadBalancer 需要协同集群外部的组件才能实现，此外部组件并不接受Kubemetes的管理。</p>
</li>
<li><p><strong>第四种</strong>是ExternalName,通过将Service映射由ExternalName字段的内容指定的主机名来暴露服务</p>
</li>
</ul>
<blockquote>
<p> Service IP 是一种虚拟IP ，也称为Cluster IP ，它专用于集群内通信，通常使用专用的地址段，如“ 10.96.0.0/12 ”网络     PodIP常用: 10.244.0.0/16</p>
<p>Ingress：Pod和service都只能在集群内部通信，Ingress可以实现HTTPS（七层）负载均衡，实现和集群外部通信，本身是一组路由规则的集合，其控制器主要使用<strong>Nginx</strong>，或者haproxy</p>
<p>HostPort和NodePort的区别：NodetPort是通过所有节点暴露容器服务，而HostPort由Pod对象所在的节点IP地址来暴露</p>
</blockquote>
<h3 id="k8s集群的网络"><a href="#k8s集群的网络" class="headerlink" title="k8s集群的网络"></a>k8s集群的网络</h3><p><strong>目的：</strong></p>
<p>所有Pod之间不需要经过NAT直接通信，都在一个扁平的网络空间内</p>
<p>所有集群内节点可不经过NAT机制直接和所有容器进行通信</p>
<p><strong>分类：</strong>          </p>
<ol>
<li><p>各主机自身的网络，地址配置于主机网络接口，配置于k8s集群构建之前，不能由k8s管理</p>
</li>
<li><p>k8s集群专用于pod资源对象的虚拟网络，配置在Pod的容器接口上，为Pod设定IP和网络，借助于CNI插件实现，可部署k8s集群之外或者托管在集群上，需要在构建集群有管理员定义</p>
</li>
<li><p>专用于service资源对象的虚拟网络，不配置在任何主机或者容器的网络接口，通过node的kube-proxy配置为iptables或者ipvs规则，网络在集群创建时指定</p>
</li>
</ol>
<h3 id="Kubernetes-资源对象"><a href="#Kubernetes-资源对象" class="headerlink" title="Kubernetes 资源对象"></a>Kubernetes 资源对象</h3><table>
<thead>
<tr>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>工作负载( Workload ）</strong></td>
<td>通常称为pod 控制器，主要分为有状态、无状态</td>
</tr>
<tr>
<td><strong>发现和负载均衡（ Discovery &amp; LB ）</strong></td>
<td>Ingress（七层负载均衡）</td>
</tr>
<tr>
<td><strong>配置和存储（ Config &amp; Storage ）</strong></td>
<td>挂载外部存储卷</td>
</tr>
<tr>
<td><strong>集群( Cluster ）资源</strong></td>
<td>Node、Role、ClusterRole、RoleBinding、 ClusterRoleBinding</td>
</tr>
<tr>
<td><strong>元数据（ Metadata ）</strong></td>
<td>具有kind 、apiVersion 、metadata 、spec 和status 五个一级宇段</td>
</tr>
</tbody></table>
<p>资源类型（ resource type ）是指在URL 中使用的名称，如Pod 、Namespace 和Service等，其URL 格式为“ GROUPNERSION度ESOURCE ”，如apps/v1/deployment 。</p>
<ul>
<li><p><em>apiVersion</em>  版本号，例如 v1</p>
</li>
<li><p><em>kind</em> 代表着资源对象所属的类 Pod/Deployment/Service/Namespace</p>
</li>
<li><p><em>metadata</em> 字段为资源提供元数据信息，如名称、隶属的名称空间和标签等；</p>
</li>
<li><p><em>spec</em> 则用于定义用户期望的状态，不同的资源类型，其状态的意义也各有不同</p>
</li>
<li><p><em>status</em> 则记录着活动对象的当前状态信息，它由Kubemetes 系统自行维护，对用户来说为只读字段</p>
</li>
</ul>
<blockquote>
<p>如果是YAML 格式的清单文件，多个资源彼此之间要使用—</p>
<p>单独的一行进行资源分割，这样，多个资源就将以清单文件中定义的次序被create 、apply等子命令调用</p>
<p>kubectl api-versions 查看现有api的版本</p>
</blockquote>
<h2 id="kubectl常用命令"><a href="#kubectl常用命令" class="headerlink" title="kubectl常用命令"></a><strong>kubectl常用命令</strong></h2><h3 id="kubectl-的命令分类："><a href="#kubectl-的命令分类：" class="headerlink" title="kubectl 的命令分类："></a>kubectl 的命令分类：</h3><table>
<thead>
<tr>
<th>类型</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td><strong>陈述式命令</strong>（ imperative command ）</td>
<td>run , expose 、delete 和get 等命令</td>
</tr>
<tr>
<td><strong>陈述式对象配置</strong>（ imperative object configuration ）</td>
<td>create 、delete 、get 、describe和replace</td>
</tr>
<tr>
<td><strong>声明式对象配置</strong>（ declarative object config uration )</td>
<td>apply</td>
</tr>
</tbody></table>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDYvMzAvRVJnM1lHajF1VVpURm5OLnBuZw?x-oss-process=image/format,png" alt="kubectl命令1.png"></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDYvMzAvMTl6NThyb0xiNGtVRjZnLnBuZw?x-oss-process=image/format,png" alt="kubectl命令2.png"></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDYvMzAvbHRqS29QNlJ3T2dXR2U3LnBuZw?x-oss-process=image/format,png" alt="kubectl命令3.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、创建一个nginx的deployment</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl run nginx-deploy --image=nginx:1.12 --port=80 --replicas=2</span></span><br><span class="line"></span><br><span class="line">2、对nginx-deploy进行扩缩容</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl scale deploy/nginx-deploy --replicas=3</span></span><br><span class="line"></span><br><span class="line">3、对nginx-deploy进行服务端口暴露,通过Service的8080端口转发至容器的80端口上</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl expose deployment nginx-deploy --port=8080 --target-port=80</span></span><br><span class="line"></span><br><span class="line">4、将nginx-deploy暴露为NortPort</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl expose deployment nginx-deploy --<span class="built_in">type</span>=<span class="string">"NodePort"</span> --port=80 --name=my_nginx_web</span></span><br><span class="line"></span><br><span class="line">5、打印容器日志</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl logs coredns-7b47bbb54c-q6dkr -n kube-system -f</span></span><br><span class="line">.:53</span><br><span class="line">[INFO] plugin/reload: Running configuration MD5 = 1588bb3af386f386c40674040e2b3399</span><br><span class="line">   ______                ____  _   _______</span><br><span class="line">  / ____/___  ________  / __ \/ | / / ___/      ~ CoreDNS-1.6.3</span><br><span class="line"> / /   / __ \/ ___/ _ \/ / / /  |/ /\__ \       ~ linux/amd64, go1.12.9, 37b9550</span><br><span class="line">/ /___/ /_/ / /  /  __/ /_/ / /|  /___/ /</span><br><span class="line">\____/\____/_/   \___/_____/_/ |_//____/</span><br><span class="line"></span><br><span class="line">-f 用于持续监控指定容器中的日志输出,类似于tail -f</span><br><span class="line"></span><br><span class="line">6、进入容器执行命令</span><br><span class="line">格式: kubectl exec -it &lt;Pod-name&gt; /bin/bash  </span><br><span class="line"><span class="meta">#</span><span class="bash">进入容器，如果一个pod里面有多个容器加 -c &lt;container name&gt; 指定容器</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl <span class="built_in">exec</span> -it nginx-deploy-64c7978669-2x5xz -n kube-system /bin/bash</span></span><br><span class="line"></span><br><span class="line">7、删除某个命名空间所有pod</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl delete pods --all -n kube-public</span></span><br><span class="line"></span><br><span class="line">8、查看版本</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl version --short       <span class="comment">#查看版本，也可以使用kubectl get node查看</span></span></span><br><span class="line"></span><br><span class="line">Client Version: v1.15.0 </span><br><span class="line">Server Version: v1.15.0</span><br><span class="line"></span><br><span class="line">9、运行一个测试容器</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl run client --image=busybox --restart=Never -it -- /bin/sh</span></span><br><span class="line"></span><br><span class="line">10、命令的测试运行，选项--dry-run</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl run nginx-deploy --image=nginx:1.12 --port=80 --replicas=2 --dry-run</span></span><br><span class="line"></span><br><span class="line">11、给指定节点打标签</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl label nodes master disktype=ssd</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>基础概念</tag>
      </tags>
  </entry>
  <entry>
    <title>github+hexo搭建个人博客</title>
    <url>/2020/06/28/github-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>前言：搭建个人博客也是心血来潮，很久之前就看到别人的博客很清新、简约、大气、时尚又装逼，嘿嘿。。。就想着自己折腾一个，奈何当时技术能力有限，连github都玩不转，当然以失败告终，最近又头脑发热，遂百度了n多资料，又开始了填（bei）坑(nue）之旅，而且能找到的资料大多仅仅就是搭建起来，作为一个强迫症患者，肯定不能忍受没有优化过的样子，所以本着搭建一个完整的博客并记录优化过程，如果你喜欢我博客的样子，参考此教程一定能够搭建起来差不多的样子。</p>
<p>我的博客：<a href="https://pythontaotao.github.io/">https://pythontaotao.github.io/</a></p>
<a id="more"></a>

<p><strong>什么是hexo?</strong></p>
<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h1 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h1><ul>
<li><p>Windows：下载并安装 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a>.</p>
</li>
<li><p>Mac：使用 <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="noopener">Homebrew</a>, <a href="http://www.macports.org/" target="_blank" rel="noopener">MacPorts</a> 或者下载 <a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">安装程序</a>。</p>
</li>
</ul>
<h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><p>下载地址：<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">win 10下载v 14.4.0</a>            <a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">win 7下载v 12.18.0</a></p>
<p> 安装时，请勾选Add to PATH选项，其他步骤不明白可以百度安装教程<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDYvMjkvNERrcXVTeTdaMWpUMllSLnBuZw?x-oss-process=image/format,png" alt="version.png">  </p>
<p>查询版本如上，说明安装OK</p>
<h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>npm是NodeJS包管理工具，类似于python的pip</p>
<h1 id="在本地搭建个人站点"><a href="#在本地搭建个人站点" class="headerlink" title="在本地搭建个人站点"></a>在本地搭建个人站点</h1><p>4.1、新建一个文件夹，位置和名称都没有限制，我们这里新建D:/hexo</p>
<p>4.2、使用git的命令行工具，初始化文件夹（选中hexo文件夹，右键Git Bash Here）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init hexo</span></span><br><span class="line">输出信息如下</span><br><span class="line">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class="line">Cloning into 'D:\hexo-new'...</span><br><span class="line">remote: Enumerating objects: 165, done.</span><br><span class="line">remote: Total 165 (delta 0), reused 0 (delta 0), pack-reused 165</span><br><span class="line">Receiving objects: 100% (165/165), 31.30 KiB | 124.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (79/79), done.</span><br><span class="line">Submodule 'themes/landscape' (https://github.com/hexojs/hexo-theme-landscape.git) registered for path 'themes/landscape'</span><br><span class="line">Cloning into 'D:/hexo-new/themes/landscape'...</span><br><span class="line">remote: Enumerating objects: 4, done.</span><br><span class="line">remote: Counting objects: 100% (4/4), done.</span><br><span class="line">remote: Compressing objects: 100% (4/4), done.</span><br><span class="line">remote: Total 1067 (delta 0), reused 0 (delta 0), pack-reused 1063</span><br><span class="line">Receiving objects: 100% (1067/1067), 3.22 MiB | 27.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (585/585), done.</span><br><span class="line">Submodule path 'themes/landscape': checked out '73a23c51f8487cfcd7c6deec96ccc7543960d350'</span><br><span class="line">INFO  Install dependencies</span><br><span class="line">npm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated</span><br><span class="line">npm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ejs@2.7.4 postinstall D:\hexo-new\node_modules\ejs</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> node ./postinstall.js</span></span><br><span class="line"></span><br><span class="line">Thank you for installing EJS: built with the Jake JavaScript build tool (https://jakejs.com/)</span><br><span class="line"></span><br><span class="line">npm notice created a lockfile as package-lock.json. You should commit this file.</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.1.2 (node_modules\chokidar\node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.1.3: wanted &#123;"os":"darwin","arch":"any"&#125; (current: &#123;"os":"win32","arch":"x64"&#125;)</span><br><span class="line"></span><br><span class="line">added 253 packages from 450 contributors in 30.278s</span><br><span class="line"></span><br><span class="line">5 packages are looking for funding</span><br><span class="line">  run `npm fund` for details</span><br><span class="line"></span><br><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── .deploy #需要部署的文件</span><br><span class="line">├── node_modules #Hexo插件</span><br><span class="line">├── public #生成的静态网页文件</span><br><span class="line">├── scaffolds #模板</span><br><span class="line">├── source #博客正文和其他源文件, 404 favicon CNAME 等都应该放在这里</span><br><span class="line">| ├── _drafts #草稿</span><br><span class="line">| └── _posts #文章</span><br><span class="line">├── themes #主题</span><br><span class="line">├── _config.yml #全局配置文件</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure>



<p>初始化完成后会看到有以上文件内容，就是我们博客的初始化文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd hexo</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">npm install=npm i。在git clone项目的时候，项目文件中并没有 node_modules文件夹，项目的依赖文件可能很大。直接执行，npm会根据package.json配置文件中的依赖配置下载安装</span><br></pre></td></tr></table></figure>

<p>在 Hexo 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>
<p>为了描述方便，在以下说明中，将前者称为 <strong>站点配置文件</strong>， 后者称为 <strong>主题配置文件</strong>。</p>
<p>4.3、在本地进行测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo g</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s</span></span><br><span class="line">Hexo is running at http://localhost:4000 . Press Ctrl+C to stop</span><br></pre></td></tr></table></figure>

<p>在浏览器输入<a href="http://localhost:4000，可以看到hexo博客最原始的样子">http://localhost:4000，可以看到hexo博客最原始的样子</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDYvMjkvWTdHSjJMeG1zMWE0clNDLnBuZw?x-oss-process=image/format,png" alt="bokechushihua.png"></p>
<p>4.4、hexo相关指令讲解（熟悉的小伙伴可以跳过这里）</p>
<p>a、<strong>init</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure>

<p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>
<p>b、<strong>new</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br><span class="line"></span><br><span class="line">$ hexo new &quot;post title with whitespace&quot;</span><br></pre></td></tr></table></figure>

<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>
<p>c、 <strong>generate</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo generate      生成静态文件。简写 $ hexo g</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-d</code>, <code>--deploy</code></td>
<td align="left">文件生成后立即部署网站,简写 hexo d</td>
</tr>
</tbody></table>
<p>d、<strong>server</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo server      </span><br><span class="line">启动服务器。默认情况下，访问网址为： http:&#x2F;&#x2F;localhost:4000&#x2F; </span><br><span class="line">简写 $ hexo  s</span><br></pre></td></tr></table></figure>

<p>e、<strong>version</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo version      显示Hexo 版本</span><br></pre></td></tr></table></figure>

<h1 id="修改配置文件，关联github上"><a href="#修改配置文件，关联github上" class="headerlink" title="修改配置文件，关联github上"></a>修改配置文件，关联github上</h1><p>5.1、先创建github的仓库，仓库名称前缀要和你的github名一样，忽略我这里的大小写问题，</p>
<p><img src="https://i.loli.net/2020/06/29/inSqXzLpEA7ZDjW.png" alt="sshpath.png"></p>
<p>新建成功后，复制仓库的ssh地址，后续修改配置文件需要使用</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDYvMjkvaW5TcVh6THBFQTdaRGpXLnBuZw?x-oss-process=image/format,png" alt="sshpath.png"></p>
<p><strong>5.2、安装和切换主题，重点来了哦！！！</strong></p>
<p>首先我们要找到自己喜欢的主题，在github上面搜索hexo-them，比较受欢迎的是Next和yilia这两个主题，以Next主题为例，如果你喜欢其他主题，也可以设置相对应的主题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> hexo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure>

<p>安装完成后可以看到themes文件夹下面多了一个ngxt的文件夹，这个就是我们下载的next主题</p>
<p>5.3、修改主题配置文件，需要懂一些yaml的语法知识，不懂得自行百度下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo/_config.yml     #这个文件是整个博客站点的配置文件</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Extensions</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Plugins: https://hexo.io/plugins/</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Themes: https://hexo.io/themes/</span></span></span><br><span class="line">theme: next                            #使用next主题,这个相当于一个主题切换控制开关</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Deployment</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Docs: https://hexo.io/docs/deployment.html</span></span></span><br><span class="line">deploy:                                #将我们本地的代码部署到刚刚创建的仓库中</span><br><span class="line">  type: 'git'</span><br><span class="line">  repository: "git@github.com:pythonTaotao/pythonTaotao.github.io.git"</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>修改后在本地先测试一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDYvMjkvTm5tOTVkZTRmY0NnWjdrLnBuZw?x-oss-process=image/format,png" alt="nextzhuti.png"></p>
<p>激动人心的时刻到了，上面就是我们最原始的next主题的样子，这个博客在本地测试已经没有问题了，现在要把它部署到github上面</p>
<p>5.4、发布博客</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>部署完成后，在github的setting中 可以看到自己的博客地址</p>
<p><a href="https://sm.ms/image/MPj7NZW8LAX6HS1" target="_blank"><img src="https://i.loli.net/2020/06/29/MPj7NZW8LAX6HS1.png" alt="githubpasge.png"></a></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>至于最后发布文章和自定义各种不同的主题，可自己去探索，至此所有的步骤都已经讲完，希望对你有所帮助。如遇到bug可留言。感谢阅读。下一节讲解如何美化我们搭建的hexo博客</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/06/28/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>测试修改功能<br>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>proxmox（pve）安装Win10系统虚拟机</title>
    <url>/2020/06/26/proxmox-pve-%E5%AE%89%E8%A3%85Win10%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="安装proxmox-ve"><a href="#安装proxmox-ve" class="headerlink" title="安装proxmox ve"></a>安装proxmox ve</h2><p>Proxmox VE是一个完整的企业虚拟化开源平台。借助内置的Web界面，您可以轻松管理虚拟机和容器，软件定义的存储和网络，高可用性集群以及单个解决方案上的多个现成工具。</p>
<a id="more"></a>

<p>官网地址：<a href="https://www.proxmox.com/en/downloads" target="_blank" rel="noopener">点击这里</a></p>
<p>中文社区：<a href="http://download.proxmox.wiki/iso/" target="_blank" rel="noopener">点击这里</a></p>
<p>科大镜像源：<a href="https://mirrors.ustc.edu.cn/proxmox/" target="_blank" rel="noopener">点击这里</a></p>
<p>官网地址较慢，可以选择其他两个镜像源下载<br><img src="https://i.loli.net/2020/06/28/sFmBqhRXHiJf3Vu.png" alt="pve官网下载地址截图.png"></p>
<h2 id="制作启动U盘"><a href="#制作启动U盘" class="headerlink" title="制作启动U盘"></a>制作启动U盘</h2><p>下载Rufus：<a href="http://rufus.ie/" target="_blank" rel="noopener">点击直达</a></p>
<p><img src="https://i.loli.net/2020/06/28/GPWf4KJa57lFz9s.png" alt="rufus界面.png"></p>
<p>Boot selection选择下载的proxmox ve的ISO镜像文件，Device选择自己的U盘，点击开始</p>
<p>制作完成后插到服务器启动，需提在服务器的BISO开启<strong>Inter-VT的虚拟化</strong>功能</p>
<h2 id="安装proxmox-ve-1"><a href="#安装proxmox-ve-1" class="headerlink" title="安装proxmox ve"></a>安装proxmox ve</h2><p>启动服务器，启动项选择U盘启动，即可进入下面界面</p>
<p><img src="https://i.loli.net/2020/06/28/JlKpT65M38F9ubj.png" alt="pve安装界面1.png"></p>
<p><img src="https://i.loli.net/2020/06/28/18v5qVbJ37nzirL.png" alt="pve安装设置时区.png"></p>
<p>然后输入管理员密码、设置主机名、IP地址、掩码和DNS，安装等待几分钟，具体时间根据机器配置而定，安装完成后会自动重启服务器，登录服务器的shell界面，和普通的linux系统一样</p>
<p>web控制台访问URL： http://&lt;ip地址&gt;:8006</p>
<p>用户名：root<br>密码: <code>your_passwd</code></p>
<p><img src="https://i.loli.net/2020/06/28/cUkravqmPx6XwZH.png" alt="pve的web登陆界面.png"></p>
<h2 id="通过pve安装Win10系统"><a href="#通过pve安装Win10系统" class="headerlink" title="通过pve安装Win10系统"></a>通过pve安装Win10系统</h2><ul>
<li>​      win10镜像文件  </li>
<li>​      virtual io win 驱动</li>
</ul>
<p>virtual io win 驱动下载地址：<a href="https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/" target="_blank" rel="noopener">点击直达</a>  具体版本的话最新的可以使用</p>
<p>如果这个地址下载太慢的话可以使用IDM下载，了解更多：<a href="https://www.52pojie.cn/thread-1013874-1-1.html" target="_blank" rel="noopener">点击直达</a></p>
<h4 id="上传镜像到pve"><a href="#上传镜像到pve" class="headerlink" title="上传镜像到pve"></a>上传镜像到pve</h4><p>数据中心——&gt; local存储——&gt; 内容——&gt; 上传——&gt; ISO镜像</p>
<p>或者直接FTP上传到<code>/var/lib/vz/template/iso</code>该目录下</p>
<p>需要上传win10镜像和virtual io win驱动</p>
<p><img src="https://i.loli.net/2020/06/28/2FxzvSNYR4yHWJw.png" alt="上传完镜像截图.png"></p>
<h4 id="创建win10虚拟机"><a href="#创建win10虚拟机" class="headerlink" title="创建win10虚拟机"></a>创建win10虚拟机</h4><p><img src="https://i.loli.net/2020/06/28/kVYp4ZW3jsw7Sze.png" alt="win10虚拟机硬件配置.png"></p>
<p>然后点击<strong>启动</strong>，即可看到下面的界面，一步一步进行安装即可</p>
<p><img src="https://i.loli.net/2020/06/28/KibldAOo2ThyRer.png" alt="启动win10界面.png"></p>
]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>proxmox</tag>
        <tag>pve</tag>
        <tag>win10</tag>
        <tag>虚拟化</tag>
      </tags>
  </entry>
</search>
